[["introduction.html", "Cryptocurrency Research Section - 1 Introduction 1.1 What will I learn? 1.2 Before Getting Started 1.3 Format Notes 1.4 Plan of Attack 1.5 Who is this example for? 1.6 Reproducibility 1.7 Disclaimer", " Cryptocurrency Research Riccardo (Ricky) Esclapon - LinkedIn, Personal Website John Chandler Johnson - LinkedIn Kai R. Larsen - LinkedIn, ResearchGate Last Updated: 2022-09-17 00:55:46 Section - 1 Introduction Welcome to this programming tutorial on machine learning! In this tutorial we will use live data from the cryptocurrency markets to provide a hands-on and complete example of time-series machine learning for everyone. 1.1 What will I learn? The focus of the tutorial is on supervised machine learning, a process for building models that can predict future events, such as cryptocurrency prices. You will learn how to use the caret package to make many different predictive models, and tools to evaluate their performance. In this tutorial you will primarily learn about tools for the R programming language developed by RStudio and more specifically the tidyverse. If you are not familiar with these open source products, dont worry. Well introduce these throughout the tutorial as needed. Before we can make the models themselves, we will need to clean the data. You will learn how to perform group by operations on your data using the dplyr package and to clean and modify grouped data. You will learn to visualize data using the ggplot2 package, as well as some powerful tools to extend the functionality of ggplot2. You will gain a better understanding of the steps involved in any supervised machine learning process, as well as considerations you might need to keep in mind based on your specific data and the way you plan on acting on the predictions you have made. Each problem comes with a unique set of challenges, but there are steps that are necessary in creating any supervised machine learning model, and questions you should ask yourself regardless of the specific problem at hand. You will learn about the value of reproducible research. You will also learn a little about cryptocurrencies themselves, but this is not a tutorial centered around trading or blockchain technology. 1.2 Before Getting Started You can toggle the sidebar on the left side of the page by clicking on the menu button in the top left, or by pressing on the s key on your keyboard. You can read this document as if it were a book, scrolling to the bottom of the page and going to the next chapter, or navigating between sections using the sidebar. This document is the tutorial itself, but in order to make the tutorial more accessible to people with less programming experience (or none) we created a high-level version of this tutorial, which simplifies both the problem at hand (what we want to predict) and the specific programming steps, but uses the same tools and methodology providing easier to digest examples on one cryptocurrency using a static dataset that does not get updated over time. 1.2.1 High-Level Version We recommend for everyone to run the code in the high-level version first to get more comfortable with the tools we will be using. If you are not very familiar with programming in either R or Python, or are not sure what cryptocurrencies are, you should definitely work your way through the high-level version first. Below is an embedded version of the high-level version, you can click on the presentation below and press the f button on your keyboard to full-screen it, or use any of the links above to view it in its own window: When following along with the high-level tutorial embedded above, the results will be completely reproducible and the document is static and does not update over time meaning your results will exactly match those shown. The document you are currently reading this text on on the other hand updates every 12 hours. You will be able to access the same data source, but it updates hourly by the 8th minute of every hour with the most recent data, so this document and your results wont perfectly match. 1.3 Format Notes You can hide the sidebar on the left by pressing the s key on your keyboard. The cryptocurrency data was chosen to produce results that change over time and because these markets dont have any downtime (unlike the stock market). Whenever an R package is referenced, the text will be colored orange. We will discuss R packages and the rest of the terms below later in this document, but if you are not familiar with these terms please look through the high-level version first. Whenever a function is referenced, it will be colored green. Whenever an R object is referenced, it will be colored blue. We will also refer to the parameters of functions in blue. When a term is particularly common in machine learning or data science, we will call it out with purple text, but only the first time it appears. Whenever text is highlighted this way, that means it is a snippet of R code, which will usually be done to bring attention to specific parts of a longer piece of code. You can leave feedback on any content of either version of the tutorial, for example if something is not clearly explained, by highlighting any text and clicking on the button that says Annotate. Please be aware that any feedback posted is publicly visible. Thanks to Ben Marwick for the implementation of this tool, and to Matthew Galganik for creating the Open Review Toolkit (OTR) we are using. 1.4 Plan of Attack How will we generate predictive models to predict cryptocurrency prices? At a high level, here are the steps we will be taking: Setup guide. Installation guide on getting the tools used installed on your machine. Explore data. What is the data we are working with? How good is the quality? Prepare the data. Make adjustments to clean the data based on the findings from the previous section to avoid running into problems when making models to make predictions. Visualize the data. Visualizing the data can be an effective way to understand relationships, trends and outliers before creating predictive models, and is generally useful for many different purposes. Definitely the most fun section! Make predictive models. Now we are ready to take the data available to us and use it to make predictive models that can be used to make predictions about future price movements using the latest data. Evaluate the performance of the models. Before we can use the predictive models to make predictions on the latest data, we need to understand how well we expect them to perform, which is also essential in detecting issues. 1.5 Who is this example for? Are you a Bob, Hosung, or Jessica below? This section provides more information on how to proceed with this tutorial. Bob (beginner): Bob is someone who understands the idea of predictive analytics at a high level and has heard of cryptocurrencies and is interested in learning more about both, but he has never used R. Bob would want to opt for the more high-level version of this tutorial. Bob might benefit from reading the free book R for Data Science as well before attempting this tutorial. Hosung (intermediate): Hosung is a statistician who learned to use R 10 years ago. He has heard of the tidyverse, but doesnt regularly use it in his work and he usually sticks to base R as his preference. Hosung should start with the high-level version of this tutorial and later return to this version. Jessica (expert): Jessica is a business analyst who has experience with both R and the Tidyverse and uses the pipe operator (%\\&gt;%) regularly. Jessica should skim over the high-level version before moving onto the next section for the detailed tutorial. 1.6 Reproducibility One of the objectives of this document is to showcase the power of reproducibility. This tutorial does not provide coded examples on making code reproducible, but its worth a quick discussion. The term itself is defined in different ways: We can think of something as reproducible if anyone can run the exact same analysis and end up with our exact same results. This is how the high-level version of the tutorial works. Depending on our definition, we may consider something reproducible if we can run the same analysis that is shown on a newer subset of the data without running into problems. This is how this version works, where the analysis done on your own computer would be between 1 and 12 hours newer than the one shown on this document. 1.6.1 The cost of non-reproducible research Reproducibility is especially important for research in many fields, but is a valuable tool for anyone who works with data, even within a large corporation. If you work with Excel files or any kind of data, there are tools to be aware of that can save you a lot of time and money. Even if you do things that are more involved, for example using your data to run your analysis separately and then putting together a presentation with screenshots of your results with commentary, this is also something you can automate for the future. If you do any kind of repeated manual process in Excel, chances are you would be better off creating a script that you can simply kick off to generate new results. Reproducibility is all about making the life of anyone who needs to run the analysis as simple as possible, including and especially for the author herself. When creating a one-time analysis, the tool used should be great for the specific task as well as have the side-effect of being able to run again with the click of a button. In our case we are using a tool called R Markdown (Xie, Allaire, and Grolemund 2018). Not being transparent about the methodology and data (when possible) used is a quantifiable cost that should be avoided, both in research and in business. A study conducted in 2015 for example approximated that for preclinical research (mostly on pharmaceuticals) alone the economy suffers a cost of $28 Billion a year associated with non-reproducible research in the United States (Freedman, Cockburn, and Simcoe 2015): Reproducibility as discussed in the paper embedded above relates to many aspects of the specific field of preclinical research, but in their work they identified 4 main categories that drove costs associated with irreproducibility as it pertains to preclinical research in the United States: The Data Analysis and Reporting aspect (circled in red in the screenshot above) of a project is shared across many disciplines. As it related to preclinical research, in their breakdown they attribute roughly $7.19 Billion of the costs of irreproducible preclinical research to data analysis and reporting, which could potentially be avoided through the usage of open source tools that we are utilizing for this tutorial. These costs should pale in comparison to the other three categories, and this example is meant to show that there currently exists a costly lack of awareness around these tools; the tutorial itself is meant as an example to showcase the power of these open source tools and the fact that a lot of complex analysis, including this one, can be written used reproducible tools that improve the quality and cost-effectiveness of projects. 1.6.2 GitHub As of 2020, the most popular way of sharing open source data science work is through a website called GitHub which allows users to publicly share their code and do much more. This document gets refreshed using a tool called Github Actions that runs some code and updates the file you are looking at on the public GitHub Repository for the project. The website then updates to show the latest version every time the document is refreshed on the GitHub repository. 1.6.2.1 GitHub Repository The public GitHub Repository associated with this tutorial is not only a website for us to easily distribute all the code behind this document for others to view and use, but also where it actually runs. By clicking on the option that looks like an eye in the options given at the top of the document, you can view the raw code for the page you are currently viewing on the GitHub repository. Every 12 hours, a process gets kicked off on the page associated with our project on GitHub.com and refreshes these results. Anyone can view the latest runs as they execute over time here: https://github.com/ries9112/cryptocurrencyresearch-org/actions In the next section we will talk more about the GitHub Repository for this tutorial, for now you can check on the latest run history for this document, which is expected to update every 12 hours every day: https://github.com/ries9112/cryptocurrencyresearch-org/actions If you are running into problems using the code or notice any problems, please let us know by creating an issue on the GitHub repository: https://github.com/ries9112/cryptocurrencyresearch-org/issues Go to the next section for instructions on getting setup to follow along with the code run in the tutorial. You can run every step either in the cloud on your web browser, or in your own R session. You can even make a copy of the GitHub Repository on your computer and run this book on the latest data (updated hourly), and make changes wherever you would like. All explained in the next section  1.7 Disclaimer This tutorial is made available for learning and educational purposes only and the information to follow does not constitute trading advice in any way shape or form. We avoid giving any advice when it comes to trading strategies, as this is a very complex ecosystem that is out of the scope of this tutorial; we make no attempt in this regard, and if this, rather than data science, is your interest, your time would be better spent following a different tutorial that aims to answer those questions. It should also be noted that this tutorial has nothing to do with trading itself, and that there is a difference between predicting crypotcurrency prices and creating an effective trading strategy. See this later section for more details on why the results shown in this document mean nothing in terms of the effectiveness of a trading strategy. In this document we aimed to predict the change in cryptocurrency prices, and it is very important to recognize that this is not the same as being able to successfully make money trading on the cryptocurrency markets. References "],["setup.html", "Section - 2 Setup and Installation 2.1 Option 1 - Run in the Cloud 2.2 Option 2 - Run Locally", " Section - 2 Setup and Installation Every part of this document can be run on any computer either through a cloud notebook or locally. You can also follow along with the tutorial without running the individual steps yourself. In that case, you can move on to the next page where the tutorial actually begins. 2.1 Option 1 - Run in the Cloud If you do not currently have R and RStudio installed on your computer, you can run all of the code from your web browser one step at a time here: this mobile friendly link. This can take up to 30 seconds to load, and once it has you should see a page that looks like this: From here, you can run the code one cell at a time: You can also use Shift + Enter to run an individual code cell Or run all code cells at once: If you feel lost and are not familiar with Jupyter Notebooks, you can do a quick interactive walkthrough under Help &gt; User Interface Tour: 2.2 Option 2 - Run Locally If you want to follow along from your own computer directly (recommended option), please follow the installation instructions below. Afterwards, you will be able to run the code. You only need to follow these instructions once. If you have followed these steps once already, skip ahead to the next section. 2.2.1 Setup R If you do not already have R and R Studio installed on your computer, you will need to: Install R. Install RStudio. This step is optional, but it is very recommended that you use an integrated development environment (IDE) like RStudio as you follow along, rather than just using the R console as it was installed in step 1 above. Once RStudio is installed, run the application on your computer and you are ready to run the code as it is shown below and in the rest of this document! You can run your code directly through the Console (what you are prompted to write code into when RStudio boots up), or create a new document to save your code as you go along: You will then be able to save your document with the .R extension on your computer and re-run your code line by line. 2.2.2 Install and Load Packages Packages are collections of functions and data that other users have made shareable outside of the functionality provided by the base functionality of R that comes pre-loaded every time a new session is started. We can install these packages into our own library of R tools and load them into our R session, which can enable us to write powerful code with minimal effort compared to writing the same code without the additional packages. Many packages are simply time savers for things we could do with the default/base functionality of R, but sometimes if we want to do something like make a static chart interactive when hovering over points on the chart, we are better off using a package someone already came up with rather than re-inventing the wheel for a difficult task. 2.2.3 Install Pacman Lets start by installing the pacman package (Rinker and Kurkiewicz 2019) using the function install.packages(): install.packages(&#39;pacman&#39;) We only need to install any given package once on any given computer, kind of like installing an application (like RStudio or Google Chrome) once before being able to use it. When you boot-up your computer it doesnt open every application you have installed and similarly here we choose what functionality we need for our current session by importing packages. All functionality that is made available at the start (foundational functions like mean() and max()) of an R session is referred to as Base R, functionality from other packages needs to be loaded using the library() function. 2.2.4 Load Pacman We can load the pacman package using the library() function: library(pacman) pacman does not refer to the videogame, and stands for package manager. After we importing this package, we can now use new functions that come with it. 2.2.5 Install All Other Packages We can use p_load() to install the remaining packages we will need for the rest of the tutorial. The advantage to using the new function, is the installation will happen in a smarter way, where if you already have a package in your library, it will not be installed again. p_load(&#39;pins&#39;, &#39;skimr&#39;, &#39;DT&#39;, &#39;httr&#39;, &#39;jsonlite&#39;, # Data Exploration &#39;tidyverse&#39;, &#39;tsibble&#39;, &#39;anytime&#39;, # Data Prep &#39;ggTimeSeries&#39;, &#39;gifski&#39;, &#39;av&#39;, &#39;magick&#39;, &#39;ggthemes&#39;, &#39;plotly&#39;, # Visualization &#39;ggpubr&#39;, &#39;ggforce&#39;, &#39;gganimate&#39;, &#39;transformr&#39;, # Visualization continued &#39;caret&#39;, &#39;doParallel&#39;, &#39;parallel&#39;, &#39;xgboost&#39;, # Predictive Modeling &#39;brnn&#39;, &#39;party&#39;, &#39;deepnet&#39;, &#39;elasticnet&#39;, &#39;pls&#39;, # Predictive Modeling continued &#39;hydroGOF&#39;, &#39;formattable&#39;, &#39;knitr&#39;) # Evaluate Model Performance It is normal for this step to take a long time, as it will install every package you will need to follow along with the rest of the tutorial. The next time you run this command it would be much faster because it would skip installing the already installed packages. Running p_load() is equivalent to running install.packages() on each of the packages listed (but only when they are not already installed on your computer), and then running library() for each package in quotes separated by commas to import the functionality from the package into the current R session. Both commands are wrapped inside the single function call to p_load(). We could run each command individually using base R and create our own logic to only install packages not currently installed, but we are better off using a package that has already been developed and scrutinized by many expert programmers; the same goes for complex statistical models, we dont need to create things from scratch if we understand how to properly use tools developed by the open source community. Open source tools have become particularly good in recent years and can be used for any kind of work, including commercial work, most large corporations have started using open source tools available through R and Python. Nice work! Now you have everything you need to follow along with this example . References "],["explore-data.html", "Section - 3 Explore the Data 3.1 Pull the Data 3.2 Data Preview 3.3 The definition of a price 3.4 Data Quality 3.5 Data Source Additional Details", " Section - 3 Explore the Data 3.1 Pull the Data The first thing we will need to do is download the latest data. We will do this by using the pins package (Luraschi 2020), which has already been loaded into our session in the previous section. First, we will need to connect to a public GitHub repository (as previously described) and register the board that the data is pinned to by using the board_register() function: board_register(name = &quot;pins_board&quot;, url = &quot;https://raw.githubusercontent.com/predictcrypto/pins/master/&quot;, board = &quot;datatxt&quot;) By running the board_register() command on the URL where the data is located, we can now ask for the data we are interested in, which is called hitBTC_orderbook, by using the pin_get() command: cryptodata &lt;- pin_get(name = &quot;hitBTC_orderbook&quot;,board = &quot;pins_board&quot;) The data has been saved to the cryptodata object. 3.2 Data Preview Below is a preview of the data: Only the first 2,000 rows of the data are shown in the table above. There are 300000 rows in the actual full dataset. The latest data is from 2022-09-16 (UTC timezone). This is tidy data, meaning: Every column is a variable. Every row is an observation. Every cell is a single value relating to a specific variable and observation. The data is collected once per hour. Each row is an observation of an individual cryptocurrency, and the same cryptocurrency is tracked on an hourly basis, each time presented as a new row in the dataset. 3.3 The definition of a price When we are talking about the price of a cryptocurrency, there are several different ways to define it and there is a lot more than meets the eye. Most people check cryptocurrency prices on websites that aggregate data across thousands of exchanges, and have ways of computing a global average that represents the current price of the cryptocurrency. This is what happens on the very popular website coinmarketcap.com, but is this the correct approach for our use case? Before we even start programming, a crucial step of any successful predictive modeling process is defining the problem in a way that makes sense in relation to the actions we are looking to take. If we are looking to trade a specific cryptocurrency on a specific exchange, using the global average price is not going to be the best approach because we might create a model that believes we could have traded at certain prices when this was actually not the case. If this was the only data available we could certainly try and extrapolate trends across all exchanges and countries, but a better alternative available to us is to define the price as the price that we could have actually purchased the cryptocurrency at. If we are interested in purchasing a cryptocurrency, we should consider data for the price we could have actually purchased it at. 3.3.1 Order Book A cryptocurrency exchange works by having a constantly evolving order book, where traders can post specific trades they want to make to either sell or buy a cryptocurrency specifying the price and quantity. When someone posts a trade to sell a cryptocurrency at a price that someone else is looking to purchase it at, a trade between the two parties will take place. You can find the live order book for the exchange we will be using here: https://hitbtc.com/btc-to-usdt From that page you can scroll down to view specific information relating to the orderbooks: 3.3.1.1 Market Depth Lets focus on the Market Depth Chart for now: Here, the x-axis shows the price of the cryptocurrency, with the lower prices on the left and the higher ones on the right, while the y-axis shows the cumulative volume (here in terms of Bitcoins) of orders that could currently be triggered on each side (the liquidity of the market). In the screenshot above, around the $13,000 price point the market essentially runs out of people willing to buy the cryptocurrency, and for prices past that point people are looking to sell the asset. The screenshot shows there are many orders that are waiting to be fulfilled, around the $12,500 price point shown for example the chart tells us that if we wanted to buy the cryptocurrency BTC at that price there would have to be about 1,500 BTC sold for more expensive prices before the order was triggered. The market will fulfill trades that are posted to the order book and match buyers and sellers. The price at which the two sides of the orderbook converge is the price we could currently trade the cryptocurrency on this exchange at. Because the price works this way, we couldnt simply buy 1,500 BTC at the $13,000 price point because we would run out of people who are willing to sell their BTC at that price point, and to fulfill the entire order we would need to pay more than what we would consider to be the price depending on how much we were looking to purchase. This is one of the many reasons for why any positive results shown here wouldnt necessarily produce an effective trading strategy if put into practice in the real world. There is a meaningful difference between predicting price movements for the cryptocurrency markets, and actually performing effective trades, so please experiment and play around with the data as much as youd like, but hold back the urge to use this data to perform real trades. 3.3.1.2 Live Order Book Below the Market Depth Chart we can find the actual data relating to the order books visualized above: The data we will be working with is comprised by the top 5 price points of the order book on each side. We have access to the 5 highest bid prices (on the side looking to buy), and the 5 lowest ask prices (from traders looking to sell). In relation to the screenshot above, the data we are using would be made up of the first 5 rows shown only. 3.3.2 In Summary To summarize the implications of what was explained above, the data we are using gives us the 5 nearest prices on both sides of where the red and green lines connect on the Market Depth Chart, as well as the quantity available to purchase or sell at that given price point. In order to make predictive models to predict the price of a cryptocurrency, we will first need to define the price as the lowest available price that allows us to buy enough of it based on the current orderbook data as described above. 3.4 Data Quality Before jumping into actually cleaning your data, its worth spending time doing some Exploratory Data Analysis (EDA), which is the process of analyzing the data itself for issues before starting on any other process. Most data science and business problems will require you to have a deep understanding of your dataset and all of its caveats and issues, and without those fundamental problems understood and accounted for no model will make sense. In our case this understanding mostly comes from understanding how the price of a cryptocurrency is defined, which we reviewed above, and there isnt too much else for us to worry about in terms of the quality of the raw data, but in other cases doing EDA will be a more involved process doing things like visualizing the different columns of the data. There are a lot of tools that can be used for this, but as an example we can use one of the packages we already imported into the R session in the setup section called skimr (Waring et al. 2020) to get a quick overview/summary of the quality of the different columns that make up the data. We can use the skim() function on the cryptodata dataframe to get a summary of the data to help locate any potential data quality issues: skim(cryptodata) Table 3.1: Data summary Name cryptodata Number of rows 300000 Number of columns 27 _______________________ Column type frequency: character 5 Date 1 numeric 20 POSIXct 1 ________________________ Group variables Variable type: character skim_variable n_missing complete_rate min max empty n_unique whitespace pair 0 1 5 10 0 180 0 symbol 0 1 1 6 0 180 0 quote_currency 0 1 3 3 0 1 0 pkDummy 0 1 13 13 0 1684 0 pkey 0 1 14 19 0 300000 0 Variable type: Date skim_variable n_missing complete_rate min max median n_unique date 0 1 2022-07-08 2022-09-16 2022-08-13 71 Variable type: numeric skim_variable n_missing complete_rate mean sd p0 p25 p50 p75 p100 hist ask_1_price 0 1 391.34 4985.00 0 0.01 0.18 1.05 579998  ask_1_quantity 0 1 2691527.07 34376601.20 0 10.63 217.50 2372.00 2209077000  ask_2_price 0 1 429.54 5403.74 0 0.01 0.18 1.05 600000  ask_2_quantity 0 1 5015187.74 78729944.47 0 7.86 181.44 2792.10 3767256000  ask_3_price 0 1 487.18 6778.19 0 0.01 0.19 1.10 800000  ask_3_quantity 0 1 6269344.80 112536230.78 0 3.00 141.20 2447.24 7236090000  ask_4_price 0 1 614.77 10360.85 0 0.01 0.20 1.14 889984  ask_4_quantity 0 1 7036031.39 135797706.44 0 1.30 111.63 2671.33 6606483000  ask_5_price 0 1 7405.40 2582015.44 0 0.01 0.21 1.17 999999999  ask_5_quantity 0 1 8712695.96 171906875.39 0 1.00 100.00 2840.00 15321290000  bid_1_price 0 1 283.68 2520.02 0 0.01 0.15 1.00 39574  bid_1_quantity 0 1 2219989.23 31834665.09 0 5.15 128.87 1885.03 5754950000  bid_2_price 0 1 282.86 2516.28 0 0.01 0.14 1.00 39573  bid_2_quantity 0 1 3792552.39 67214925.31 0 5.00 214.25 2390.00 4377028000  bid_3_price 0 1 268.28 2342.61 0 0.01 0.13 0.99 38573  bid_3_quantity 0 1 4176085.52 80519786.61 0 3.81 130.45 2000.00 5365356000  bid_4_price 0 1 257.78 2241.28 0 0.01 0.13 0.97 37573  bid_4_quantity 0 1 5531378.27 105163347.71 0 3.40 122.70 2609.40 6447161000  bid_5_price 0 1 246.34 2148.03 0 0.01 0.12 0.93 36573  bid_5_quantity 0 1 4912670.58 100223116.17 0 2.68 104.00 3094.29 6309579000  Variable type: POSIXct skim_variable n_missing complete_rate min max median n_unique date_time_utc 0 1 2022-07-08 2022-09-16 23:04:30 2022-08-13 01:01:38 234220 This summary helps us understand things like how many rows with missing values there are in a given column, or how the values are distributed. In this case there shouldnt be any major data quality issues, for example the majority of values should not be NA/missing. If you are noticing something different please create an issue on the GitHub repository for the project. One more optional section below for anyone who wants even more specific details around the entire process by which the data is collected and made available. Move on to the next section, where we make the adjustments necessary to the data before we can start making visualizations and predictive models. 3.5 Data Source Additional Details This section is optional for anyone who wants to know the exact process of how the data is sourced and refreshed. The data is pulled without authentication requirements using a public API endpoint made available by the HitBTC cryptocurrency exchange (the one we are using). See the code below for an actual example of how the data was sourced that runs every time this document runs. Below is an example pulling the Ethereum (ETH) cryptocurrency, if you followed the setup steps you should be able to run the code below for yourself to pull the live order book data: fromJSON(content(GET(&quot;https://api.hitbtc.com/api/2/public/orderbook/ETHUSD&quot;, query=list(limit=5)), type = &quot;text&quot;, encoding = &quot;UTF-8&quot;)) ## $symbol ## [1] &quot;ETHUSD&quot; ## ## $timestamp ## [1] &quot;2022-09-17T00:56:05.210Z&quot; ## ## $batchingTime ## [1] &quot;2022-09-17T00:56:05.222Z&quot; ## ## $ask ## price size ## 1 1443.052 0.2363 ## 2 1443.086 0.1023 ## 3 1443.342 0.9683 ## 4 1443.343 0.8299 ## 5 1443.344 0.7689 ## ## $bid ## price size ## 1 1442.834 1.3000 ## 2 1442.816 0.0525 ## 3 1442.565 0.0525 ## 4 1442.454 0.1757 ## 5 1442.405 0.4082 The data is collected by a script running on a private RStudio server that iterates through all cryptocurrency options one by one at the start of every hour from the HitBTC cryptocurrency exchange API order books data (as pulled above), and appends the latest data to a private database for long-term storage. Once the data is in the database, a different script gets kicked off every hour to publish the latest data from the database to the publicly available pins data source discussed at the beginning of this section. References "],["data-prep.html", "Section - 4 Data Prep 4.1 Remove Nulls 4.2 Calculate price_usd Column 4.3 Clean Data by Group 4.4 Calculate Target 4.5 Remove Nulls", " Section - 4 Data Prep Next we will do some data cleaning to make sure our data is in the format we need it to be in. For a gentler introduction to data prep using the dplyr package (Wickham, François, et al. 2020) consult the high-level version. 4.1 Remove Nulls First off, we arent able to do anything at all with a row of data if we dont know when the data was collected. The specific price doesnt matter if we cant tie it to a timestamp, given by the date_time_utc field. We can exclude all rows where the date_time_utc field has a Null (missing) value by using the filter() function from the dplyr package: cryptodata &lt;- filter(cryptodata, !is.na(date_time_utc)) This step removed 0 rows from the data on the latest run (2022-09-17). The is.na() function finds all cases where the date_time_utc field has a Null value. The function is preceded by the ! operator, which tells the filter() function to exclude these rows from the data. By the same logic, if we dont know what the price was for any of the rows, the whole row of data is useless and should be removed. But how will we define the price of a cryptocurrency? 4.2 Calculate price_usd Column In the previous section we discussed the intricacies of a cryptocurrencys price. We could complicate our definition of a price by considering both the bid and ask prices from the perspective of someone who wants to perform trades, but this is not a trading tutorial. Instead, we will define the price of a cryptocurrency as the price we could purchase it for. We will calculate the price_usd field using the cheapest price available from the ask side where at least $15 worth of the cryptocurrency are being sold. Therefore, lets figure out the lowest price from the order book data that would allow us to purchase at least $15 worth of the cryptocurrency. To do this, for each ask price and quantity, lets figure out the value of the trade in US Dollars. We can create each of the new trade_usd columns using the mutate() function. The trade_usd_1 should be calculated as the ask_1_price multiplied by the ask_1_quantity. The next one trade_usd_2 should consider the ask_2_price, but be multiplied by the sum of ask_1_quantity and ask_2_quantity because at the ask_2_price pricepoint we can also purchase the quantity available at the ask_1_price pricepoint: cryptodata &lt;- mutate(cryptodata, trade_usd_1 = ask_1_price * ask_1_quantity, trade_usd_2 = ask_2_price * (ask_1_quantity + ask_2_quantity), trade_usd_3 = ask_3_price * (ask_1_quantity + ask_2_quantity + ask_3_quantity), trade_usd_4 = ask_4_price * (ask_1_quantity + ask_2_quantity + ask_3_quantity + ask_4_quantity), trade_usd_5 = ask_5_price * (ask_1_quantity + ask_2_quantity + ask_3_quantity + ask_4_quantity + ask_5_quantity)) We can confirm that the trade_usd_1 field is calculating the $ value of the lowest ask price and quantity: head(select(cryptodata, symbol, date_time_utc, ask_1_price, ask_1_quantity, trade_usd_1)) ## # A tibble: 6 x 5 ## symbol date_time_utc ask_1_price ask_1_quantity trade_usd_1 ## &lt;chr&gt; &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 BTC 2022-09-16 00:00:01 19700. 0.1 1970. ## 2 ETH 2022-09-16 00:00:03 1473. 0.135 199. ## 3 EOS 2022-09-16 00:00:04 1.38 133. 184. ## 4 LTC 2022-09-16 00:00:05 56.3 2.92 164. ## 5 BSV 2022-09-16 00:00:09 51.8 4.8 249. ## 6 ADA 2022-09-16 00:00:10 0.466 206 96.1 Now we can use the mutate() function to create the new field price_usd and find the lowest price at which we could have purchased at least $15 worth of the cryptocurrency. We can use the case_when() function to find the first trade_usd value that is greater or equal to $15, and assign the correct ask_price for the new column price_usd: cryptodata &lt;- mutate(cryptodata, price_usd = case_when( cryptodata$trade_usd_1 &gt;= 15 ~ cryptodata$ask_1_price, cryptodata$trade_usd_2 &gt;= 15 ~ cryptodata$ask_2_price, cryptodata$trade_usd_3 &gt;= 15 ~ cryptodata$ask_3_price, cryptodata$trade_usd_4 &gt;= 15 ~ cryptodata$ask_4_price, cryptodata$trade_usd_5 &gt;= 15 ~ cryptodata$ask_5_price)) Lets also remove any rows that have Null values for the new price_usd field like we did for the date_time_utc field in a previous step. These will mostly be made up of rows where the value of trades through the 5th lowest ask price was lower than $15. cryptodata &lt;- filter(cryptodata, !is.na(price_usd)) This step removed 45858 rows on the latest run. 4.3 Clean Data by Group In the high-level version of this tutorial we only dealt with one cryptocurrency. In this version however, we will be creating independent models for each cryptocurrency. Because of this, we need to ensure data quality not only for the data as a whole, but also for the data associated with each individual cryptocurrency. Instead of considering all rows when applying a transformation, we can group the data by the individual cryptocurrency and apply the transformation to each group. This will only work with compatible functions from dplyr and the tidyverse. For example, we could count the number of observations by running the count() function on the data: count(cryptodata) ## # A tibble: 1 x 1 ## n ## &lt;int&gt; ## 1 254142 But what if we wanted to know how many observations in the data are associated with each cryptocurrency separately? We can group the data using the group_by() function from the dplyr package and group the data by the cryptocurrency symbol: cryptodata &lt;- group_by(cryptodata, symbol) Now if we run the same operation using the count() function, the operation is performed grouped by the cryptocurrency symbol: count(cryptodata) ## # A tibble: 180 x 2 ## # Groups: symbol [180] ## symbol n ## &lt;chr&gt; &lt;int&gt; ## 1 1INCH 1684 ## 2 ABBC 1344 ## 3 ADA 1684 ## 4 AKRO 985 ## 5 ALCX 1546 ## 6 ALICE 1684 ## 7 ALPACA 552 ## 8 AMB 1500 ## 9 ANKR 1681 ## 10 APPC 1126 ## # ... with 170 more rows We can remove the grouping at any point by running the ungroup() function: count(ungroup(cryptodata)) ## # A tibble: 1 x 1 ## n ## &lt;int&gt; ## 1 254142 4.3.1 Remove symbols without enough rows Because this dataset evolves over time, we will need to be proactive about issues that may arise even if they arent currently a problem. What happens if a new cryptocurrency gets added to the cryptocurrency exchange? If we only had a couple days of data for an asset, not only would that not be enough information to build effective predictive models, but we may run into actual errors since the data will be further split into more groups to validate the results of the models against several datasets using cross validation, more to come on that later. To ensure we have a reasonable amount of data for each individual cryptocurrency, lets filter out any cryptocurrencies that dont have at least 1,000 observations using the filter() function: cryptodata &lt;- filter(cryptodata, n() &gt;= 1000) The number of rows for the cryptodata dataset before the filtering step was 254142 and is now 240018. This step removed 26 cryptocurrencies from the analysis that did not have enough observations associated with them. 4.3.2 Remove symbols without data from the last 3 days If there was no data collected for a cryptocurrency over the last 3 day period, lets exclude that asset from the dataset since we are only looking to model data that is currently flowing through the process. If an asset is removed from the exchange (if a project is a scam for example) or is no longer being actively captured by the data collection process, we cant make new predictions for it, so might as well exclude these ahead of time as well. cryptodata &lt;- filter(cryptodata, max(date) &gt; Sys.Date()-3) The number of rows for the cryptodata dataset before this filtering step was 235083 and is now 240018. 4.4 Calculate Target Our goal is to be able to make predictions on the price of each cryptocurrency 24 hours into the future from when the data was collected. Therefore, the target variable that we will be using as what we want to predict for the predictive models, is the price 24 hours into the future relative to when the data was collected. To do this we can create a new column in the data that is the price_usd offset by 24 rows (one for each hour), but before we can do that we need to make sure there are no gaps anywhere in the data. 4.4.1 Convert to tsibble We can fill any gaps in the data using the tsibble package (Wang et al. 2020), which was covered in more detail in the high-level version of the tutorial. 4.4.1.1 Convert to hourly data The data we are using was collected between the 0th and the 5th minute of every hour; it is collected in the same order every hour to try and get the timing as consistent as possible for each cryptocurrency, but the cadence is not exactly one hour. Therefore, if we convert the data now to a tsibble object, it would recognize the data as being collected on the wrong cadence. To fix this issue, lets create a new column called ts_index using the mutate() function which will keep the information relating to the date and hour collected, but generalize the minutes and seconds as 00:00, which will be correctly recognized by the tsibble package as being data collected on an hourly basis. The pkDummy field contains the date and hour, so we can add the text :00:00 to the end of that field, and then convert the new string to a date time object using the anytime() function from the anytime package (Eddelbuettel 2020): cryptodata &lt;- mutate(cryptodata, ts_index = anytime(paste0(pkDummy,&#39;:00:00&#39;))) Before we can convert the data to be a tsibble and easily fill in the gaps, we also need to make sure there are no duplicate values in the ts_index column for each cryptocurrency. There shouldnt be any duplicates, but just in case any make their way into the data somehow, we can use the distinct() function from the dplyr package to prevent the issue from potentially arising: cryptodata &lt;- distinct(cryptodata, symbol, ts_index, .keep_all=TRUE) Now we can finally convert the table to a tsibble data type by using the as_tsibble() function from the tsibble package (Wang et al. 2020), and providing the symbol column for the key parameter to preserve the grouped structure: cryptodata &lt;- as_tsibble(cryptodata, index = ts_index, key = symbol) Notice how the preview of the data below looks a bit different from the summary we were seeing up to this point, and now it says A tsibble, and next to the table dimensions says [1h], indicating the observations are 1 hour apart from each other. The second row tells us the Key of the tsibble is the symbol column cryptodata ## # A tsibble: 235,083 x 34 [1h] &lt;UTC&gt; ## # Key: symbol [150] ## # Groups: symbol [150] ## pair symbol quote_currency ask_1_price ask_1_quantity ask_2_price ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1INC~ 1INCH USD 0.645 331. 0.646 ## 2 1INC~ 1INCH USD 0.650 331. 0.651 ## 3 1INC~ 1INCH USD 0.657 331. 0.658 ## 4 1INC~ 1INCH USD 0.679 3578. 0.679 ## 5 1INC~ 1INCH USD 0.688 7327. 0.688 ## 6 1INC~ 1INCH USD 0.700 329. 0.700 ## 7 1INC~ 1INCH USD 0.681 329. 0.682 ## 8 1INC~ 1INCH USD 0.679 329. 0.680 ## 9 1INC~ 1INCH USD 0.681 329. 0.682 ## 10 1INC~ 1INCH USD 0.680 324. 0.680 ## # ... with 235,073 more rows, and 28 more variables: ask_2_quantity &lt;dbl&gt;, ## # ask_3_price &lt;dbl&gt;, ask_3_quantity &lt;dbl&gt;, ask_4_price &lt;dbl&gt;, ## # ask_4_quantity &lt;dbl&gt;, ask_5_price &lt;dbl&gt;, ask_5_quantity &lt;dbl&gt;, ## # bid_1_price &lt;dbl&gt;, bid_1_quantity &lt;dbl&gt;, bid_2_price &lt;dbl&gt;, ## # bid_2_quantity &lt;dbl&gt;, bid_3_price &lt;dbl&gt;, bid_3_quantity &lt;dbl&gt;, ## # bid_4_price &lt;dbl&gt;, bid_4_quantity &lt;dbl&gt;, bid_5_price &lt;dbl&gt;, ## # bid_5_quantity &lt;dbl&gt;, date_time_utc &lt;dttm&gt;, date &lt;date&gt;, pkDummy &lt;chr&gt;, ## # pkey &lt;chr&gt;, trade_usd_1 &lt;dbl&gt;, trade_usd_2 &lt;dbl&gt;, trade_usd_3 &lt;dbl&gt;, ## # trade_usd_4 &lt;dbl&gt;, trade_usd_5 &lt;dbl&gt;, price_usd &lt;dbl&gt;, ts_index &lt;dttm&gt; 4.4.2 Fill gaps Now we can use the fill_gaps() function from the tsibble package to fill any gaps found in the data, as being implicitly Null. Meaning, we will add these rows into the data with NA values for everything except for the date time field. This will allow us to safely compute the target price found 24 hours into the future relative to when each row was collected. cryptodata &lt;- fill_gaps(cryptodata) Now looking at the data again, there are 18312 additional rows that were added as implicitly missing in the data: cryptodata ## # A tsibble: 253,395 x 34 [1h] &lt;UTC&gt; ## # Key: symbol [150] ## # Groups: symbol [150] ## pair symbol quote_currency ask_1_price ask_1_quantity ask_2_price ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1INC~ 1INCH USD 0.645 331. 0.646 ## 2 1INC~ 1INCH USD 0.650 331. 0.651 ## 3 1INC~ 1INCH USD 0.657 331. 0.658 ## 4 1INC~ 1INCH USD 0.679 3578. 0.679 ## 5 &lt;NA&gt; 1INCH &lt;NA&gt; NA NA NA ## 6 &lt;NA&gt; 1INCH &lt;NA&gt; NA NA NA ## 7 &lt;NA&gt; 1INCH &lt;NA&gt; NA NA NA ## 8 &lt;NA&gt; 1INCH &lt;NA&gt; NA NA NA ## 9 &lt;NA&gt; 1INCH &lt;NA&gt; NA NA NA ## 10 &lt;NA&gt; 1INCH &lt;NA&gt; NA NA NA ## # ... with 253,385 more rows, and 28 more variables: ask_2_quantity &lt;dbl&gt;, ## # ask_3_price &lt;dbl&gt;, ask_3_quantity &lt;dbl&gt;, ask_4_price &lt;dbl&gt;, ## # ask_4_quantity &lt;dbl&gt;, ask_5_price &lt;dbl&gt;, ask_5_quantity &lt;dbl&gt;, ## # bid_1_price &lt;dbl&gt;, bid_1_quantity &lt;dbl&gt;, bid_2_price &lt;dbl&gt;, ## # bid_2_quantity &lt;dbl&gt;, bid_3_price &lt;dbl&gt;, bid_3_quantity &lt;dbl&gt;, ## # bid_4_price &lt;dbl&gt;, bid_4_quantity &lt;dbl&gt;, bid_5_price &lt;dbl&gt;, ## # bid_5_quantity &lt;dbl&gt;, date_time_utc &lt;dttm&gt;, date &lt;date&gt;, pkDummy &lt;chr&gt;, ## # pkey &lt;chr&gt;, trade_usd_1 &lt;dbl&gt;, trade_usd_2 &lt;dbl&gt;, trade_usd_3 &lt;dbl&gt;, ## # trade_usd_4 &lt;dbl&gt;, trade_usd_5 &lt;dbl&gt;, price_usd &lt;dbl&gt;, ts_index &lt;dttm&gt; Now that all of the gaps have been filled in, lets convert the data back to be in the structure of a tibble, which is the data structure that supports the grouping structure we discussed previously, and lets group the data by the symbol again: cryptodata &lt;- group_by(as_tibble(cryptodata), symbol) 4.4.3 Calculate Target Now we finally have everything we need to calculate the target variable containing the price 24 hours into the future relative to when the data was collected. We can use the usual mutate() function to add a new column to the data called target_price_24h, and use the lead() function from dplyr to offset the price_usd column by 24 hours: cryptodata &lt;- mutate(cryptodata, target_price_24h = lead(price_usd, 24, order_by=ts_index)) 4.4.4 Calculate Lagged Prices What about doing the opposite? If we added a new column showing the price from 24 hours earlier, could the price movement between then and when the data was collected help us predict where the price is headed next? If the price has gone down significantly over the previous 24 hours, is the price for the next 24 hours more likely to increase or decrease? What if the price has gone down significantly over the previous 24 hours, but has increased significantly since the past hour? These relationships around the sensitivity of a price to recent price changes may help our models come up with more accurate forecasts about the future, so lets go ahead and add some lagged prices using the same methodology used to calculate the target variable, but this time using the lag() function to get past observations instead of the lead() function used before: cryptodata &lt;- mutate(cryptodata, lagged_price_1h = lag(price_usd, 1, order_by=ts_index), lagged_price_2h = lag(price_usd, 2, order_by=ts_index), lagged_price_3h = lag(price_usd, 3, order_by=ts_index), lagged_price_6h = lag(price_usd, 6, order_by=ts_index), lagged_price_12h = lag(price_usd, 12, order_by=ts_index), lagged_price_24h = lag(price_usd, 24, order_by=ts_index), lagged_price_3d = lag(price_usd, 24*3, order_by=ts_index)) This step can be thought of as data engineering more than data cleaning, because rather than fixing an issue we are enhancing the dataset with columns that may help with the forecasts. Lets view an example of the oldest 30 rows of data associated with the Bitcoin cryptocurrency (symbol == \"BTC\"). With the oldest data starting from the top, the lagged_price_1h field should have a NA value for the first row because we dont have any prices before that point. By that same logic, the lagged_price_24h column should be missing the first 24 values and have the last 6 values showing the first 6 rows of the price_usd column. The target_price_24h would values for the oldest data because the opposite is true and we dont know the values for data for the most recent 24 rows of the data: print(select(filter(cryptodata, symbol == &#39;BTC&#39;), ts_index, price_usd, lagged_price_1h, lagged_price_24h, target_price_24h), n=30) ## # A tibble: 1,704 x 6 ## # Groups: symbol [1] ## symbol ts_index price_usd lagged_price_1h lagged_price_24h ## &lt;chr&gt; &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 BTC 2022-07-08 00:00:00 21630. NA NA ## 2 BTC 2022-07-08 01:00:00 21722. 21630. NA ## 3 BTC 2022-07-08 02:00:00 22138. 21722. NA ## 4 BTC 2022-07-08 03:00:00 21991. 22138. NA ## 5 BTC 2022-07-08 04:00:00 NA 21991. NA ## 6 BTC 2022-07-08 05:00:00 NA NA NA ## 7 BTC 2022-07-08 06:00:00 NA NA NA ## 8 BTC 2022-07-08 07:00:00 NA NA NA ## 9 BTC 2022-07-08 08:00:00 NA NA NA ## 10 BTC 2022-07-08 09:00:00 NA NA NA ## 11 BTC 2022-07-08 10:00:00 NA NA NA ## 12 BTC 2022-07-08 11:00:00 NA NA NA ## 13 BTC 2022-07-08 12:00:00 NA NA NA ## 14 BTC 2022-07-08 13:00:00 NA NA NA ## 15 BTC 2022-07-08 14:00:00 NA NA NA ## 16 BTC 2022-07-08 15:00:00 NA NA NA ## 17 BTC 2022-07-08 16:00:00 NA NA NA ## 18 BTC 2022-07-08 17:00:00 NA NA NA ## 19 BTC 2022-07-08 18:00:00 NA NA NA ## 20 BTC 2022-07-08 19:00:00 NA NA NA ## 21 BTC 2022-07-08 20:00:00 NA NA NA ## 22 BTC 2022-07-08 21:00:00 NA NA NA ## 23 BTC 2022-07-08 22:00:00 NA NA NA ## 24 BTC 2022-07-08 23:00:00 NA NA NA ## 25 BTC 2022-07-09 00:00:00 21607. NA 21630. ## 26 BTC 2022-07-09 01:00:00 21542. 21607. 21722. ## 27 BTC 2022-07-09 02:00:00 21509. 21542. 22138. ## 28 BTC 2022-07-09 03:00:00 21585. 21509. 21991. ## 29 BTC 2022-07-09 04:00:00 21617. 21585. NA ## 30 BTC 2022-07-09 05:00:00 21557 21617. NA ## # ... with 1,674 more rows, and 1 more variable: target_price_24h &lt;dbl&gt; We can wrap the code used above in the tail() function to show the most recent data and see the opposite dynamic with the new fields we created: print(tail(select(filter(cryptodata, symbol == &#39;BTC&#39;), ts_index, price_usd, lagged_price_24h, target_price_24h),30), n=30) ## # A tibble: 30 x 5 ## # Groups: symbol [1] ## symbol ts_index price_usd lagged_price_24h target_price_24h ## &lt;chr&gt; &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 BTC 2022-09-15 18:00:00 19828. 20105. 19438. ## 2 BTC 2022-09-15 19:00:00 19762. 19772. 19562. ## 3 BTC 2022-09-15 20:00:00 19775. 19950. 19615. ## 4 BTC 2022-09-15 21:00:00 19846. 19940. 19750 ## 5 BTC 2022-09-15 22:00:00 19823. 20200. 19732. ## 6 BTC 2022-09-15 23:00:00 19730. 20290. 19728. ## 7 BTC 2022-09-16 00:00:00 19700. 20217. NA ## 8 BTC 2022-09-16 01:00:00 19780. 20155. NA ## 9 BTC 2022-09-16 02:00:00 19733. 20185. NA ## 10 BTC 2022-09-16 03:00:00 19747. 20094. NA ## 11 BTC 2022-09-16 04:00:00 19745. 20017. NA ## 12 BTC 2022-09-16 05:00:00 19825. 20024. NA ## 13 BTC 2022-09-16 06:00:00 19753 20146. NA ## 14 BTC 2022-09-16 07:00:00 19766. 20096. NA ## 15 BTC 2022-09-16 08:00:00 19742. 20204. NA ## 16 BTC 2022-09-16 09:00:00 19684. 20152. NA ## 17 BTC 2022-09-16 10:00:00 19757. 20135. NA ## 18 BTC 2022-09-16 11:00:00 19790. 20154. NA ## 19 BTC 2022-09-16 12:00:00 19867. 20148. NA ## 20 BTC 2022-09-16 13:00:00 19699. 20125. NA ## 21 BTC 2022-09-16 14:00:00 19530. 20121. NA ## 22 BTC 2022-09-16 15:00:00 19666. 19704. NA ## 23 BTC 2022-09-16 16:00:00 19663. 19738. NA ## 24 BTC 2022-09-16 17:00:00 19531. 19865. NA ## 25 BTC 2022-09-16 18:00:00 19438. 19828. NA ## 26 BTC 2022-09-16 19:00:00 19562. 19762. NA ## 27 BTC 2022-09-16 20:00:00 19615. 19775. NA ## 28 BTC 2022-09-16 21:00:00 19750 19846. NA ## 29 BTC 2022-09-16 22:00:00 19732. 19823. NA ## 30 BTC 2022-09-16 23:00:00 19728. 19730. NA Reading the code shown above is less than ideal. One of the more popular tools introduced by the tidyverse is the %&gt;% operator, which works by starting with the object/data you want to make changes to first, and then apply each transformation step by step. Its simply a way of re-writing the same code in a way that is easier to read by splitting the way the function is called rather than adding functions onto each other into a single line that becomes really hard to read. In the example above it becomes difficult to keep track of where things begin, the order of operations, and the parameters associated with the specific functions. Compare that to the code below: # Start with the object/data to manipulate cryptodata %&gt;% # Filter the data to only the BTC symbol filter(symbol == &#39;BTC&#39;) %&gt;% # Select columns to display select(ts_index, price_usd, lagged_price_24h, target_price_24h) %&gt;% # Show the last 30 elements of the data tail(30) %&gt;% # Show all 30 elements instead of the default 10 for a tibble dataframe print(n = 30) ## # A tibble: 30 x 5 ## # Groups: symbol [1] ## symbol ts_index price_usd lagged_price_24h target_price_24h ## &lt;chr&gt; &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 BTC 2022-09-15 18:00:00 19828. 20105. 19438. ## 2 BTC 2022-09-15 19:00:00 19762. 19772. 19562. ## 3 BTC 2022-09-15 20:00:00 19775. 19950. 19615. ## 4 BTC 2022-09-15 21:00:00 19846. 19940. 19750 ## 5 BTC 2022-09-15 22:00:00 19823. 20200. 19732. ## 6 BTC 2022-09-15 23:00:00 19730. 20290. 19728. ## 7 BTC 2022-09-16 00:00:00 19700. 20217. NA ## 8 BTC 2022-09-16 01:00:00 19780. 20155. NA ## 9 BTC 2022-09-16 02:00:00 19733. 20185. NA ## 10 BTC 2022-09-16 03:00:00 19747. 20094. NA ## 11 BTC 2022-09-16 04:00:00 19745. 20017. NA ## 12 BTC 2022-09-16 05:00:00 19825. 20024. NA ## 13 BTC 2022-09-16 06:00:00 19753 20146. NA ## 14 BTC 2022-09-16 07:00:00 19766. 20096. NA ## 15 BTC 2022-09-16 08:00:00 19742. 20204. NA ## 16 BTC 2022-09-16 09:00:00 19684. 20152. NA ## 17 BTC 2022-09-16 10:00:00 19757. 20135. NA ## 18 BTC 2022-09-16 11:00:00 19790. 20154. NA ## 19 BTC 2022-09-16 12:00:00 19867. 20148. NA ## 20 BTC 2022-09-16 13:00:00 19699. 20125. NA ## 21 BTC 2022-09-16 14:00:00 19530. 20121. NA ## 22 BTC 2022-09-16 15:00:00 19666. 19704. NA ## 23 BTC 2022-09-16 16:00:00 19663. 19738. NA ## 24 BTC 2022-09-16 17:00:00 19531. 19865. NA ## 25 BTC 2022-09-16 18:00:00 19438. 19828. NA ## 26 BTC 2022-09-16 19:00:00 19562. 19762. NA ## 27 BTC 2022-09-16 20:00:00 19615. 19775. NA ## 28 BTC 2022-09-16 21:00:00 19750 19846. NA ## 29 BTC 2022-09-16 22:00:00 19732. 19823. NA ## 30 BTC 2022-09-16 23:00:00 19728. 19730. NA There are several advantages to writing code the tidy way, but while some love it others hate it, so we wont force anyone to have to understand how the %&gt;% operator works and we have stayed away from its use for the rest of the code shown, but we do encourage the use of this tool: https://magrittr.tidyverse.org/reference/pipe.html 4.5 Remove Nulls We cant do anything with a row of data if we dont know when the data was collected, so lets just double confirm that all rows have a value for the date_time_utc field by using the filter() function from the dplyr package to exclude any rows with NA values for the column: # Remove all NA values of date_time_utc: cryptodata &lt;- filter(cryptodata, !is.na(date_time_utc)) This step removed 18312 rows from the data. This step mainly helps us avoid issues when programmatically labeling charts in the next section, move on to the next section  to learn some amazingly powerful tools to visualize data! References "],["visualization.html", "Section - 5 Visualization  5.1 Basics - ggplot2 5.2 Using Extensions", " Section - 5 Visualization  Making visualizations using the ggplot2 package (Wickham, Chang, et al. 2020) is one of the very best tools available in the R ecosystem. The gg in ggplot2 stands for the Grammar of Graphics, which is essentially the idea that many different types of charts share the same underlying building blocks, and that they can be put together in different ways to make charts that look very different from each other. In Hadley Wickhams (the creator of the package) own words, a pie chart is just a bar chart drawn in polar coordinates, They look very different, but in terms of the grammar they have a lot of underlying similarities. 5.1 Basics - ggplot2 So how does ggplot2 actually work? in most cases you start with ggplot(), supply a dataset and aesthetic mapping (with aes()). You then add on layers (like geom_point() or geom_histogram()), scales (like scale_colour_brewer()), faceting specifications (like facet_wrap()) and coordinate systems (like coord_flip()). - ggplot2.tidyverse.org/. Lets break this down step by step. \"start with ggplot(), supply a dataset and aesthetic mapping (with aes()) Using the ggplot() function we supply the dataset first, and then define the aesthetic mapping (the visual properties of the chart) as having the date_time_utc on the x-axis, and the price_usd on the y-axis: ggplot(data = cryptodata, aes(x = date_time_utc, y = price_usd)) We were expecting a chart showing price over time, but the chart now shows up but is blank because we need to perform an additional step to determine how the data points are actually shown on the chart: You then add on layers (like geom_point() or geom_histogram()) We can take the exact same code as above and add + geom_point() to show the data on the chart as points: ggplot(data = cryptodata, aes(x = date_time_utc, y = price_usd)) + # adding geom_point(): geom_point() The most expensive cryptocurrency being shown, BTC in this case, makes it difficult to take a look at any of the other ones. Lets try zooming-in on a single one by using the same code but making an adjustment to the data parameter to only show data for the cryptocurrency with the symbol ETH. Lets filter the data down to the ETH cryptocurrency only and make the new dataset eth_data: eth_data &lt;- subset(cryptodata, symbol == &#39;ETH&#39;) We can now use the exact same code from earlier supplying the new filtered dataset for the data argument: ggplot(data = eth_data, aes(x = date_time_utc, y = price_usd)) + geom_point() This is better, but geom_point() might not be the best choice for this chart, lets change geom_point() to instead be geom_line() and see what that looks like: ggplot(data = eth_data, aes(x = date_time_utc, y = price_usd)) + # changing geom_point() into geom_line(): geom_line() Lets save the results as an object called crypto_chart: crypto_chart &lt;- ggplot(data = eth_data, aes(x = date_time_utc, y = price_usd)) + geom_line() We can add a line showing the trend over time adding stat_smooth() to the chart: crypto_chart &lt;- crypto_chart + stat_smooth() And we can show the new results by calling the crypto_chart object again: crypto_chart One particularly nice aspect of using the ggplot framework, is that we can keep adding as many elements and transformations to the chart as we would like with no limitations. We will not save the result shown below this time, but to illustrate this point, we can add a new line showing a linear regression fit going through the data using stat_smooth(method = 'lm'). And lets also show the individual points in green. We could keep layering things on as much as we want: crypto_chart + # Add linear regression line stat_smooth(method = &#39;lm&#39;, color=&#39;red&#39;) + # Add points geom_point(color=&#39;dark green&#39;, size=0.8) By not providing any method option, the stat_smooth() function defaults to use the method called loess, which shows the local trends, while the lm model fits the best fitting linear regression line for the data as a whole. The results shown above were not used to overwrite the crypto_chart object. It is of course important to add other components that make a visualization effective, lets add labels to the chart now using xlab() and ylab(), as well as ggtitle() to add a title and subtitle: crypto_chart &lt;- crypto_chart + xlab(&#39;Date Time (UTC)&#39;) + ylab(&#39;Price ($)&#39;) + ggtitle(paste(&#39;Price Change Over Time -&#39;, eth_data$symbol), subtitle = paste(&#39;Most recent data collected on:&#39;, max(eth_data$date_time_utc), &#39;(UTC)&#39;)) # display the new chart crypto_chart The ggplot2 package comes with a large amount of functionality that we are not coming even close to covering here. You can find a full reference of the functions you can use here: https://ggplot2.tidyverse.org/reference/ What makes the ggplot2 package even better is the fact that it also comes with a framework for anyone to develop their own extensions. Meaning there is a lot more functionality that the community has created that can be added in importing other packages that provide extensions to ggplot. 5.2 Using Extensions 5.2.1 ggthemes To use an extension, we just need to import it into our R session like we did with ggplot2 and the rest of the packages we want to use. We already loaded the ggthemes (Arnold 2019) package in the Setup section so we do not need to run library(ggthemes) to import the package into the session. We can apply a theme to the chart now and change the way it looks: crypto_chart &lt;- crypto_chart + theme_economist() # display the new chart crypto_chart See below for a full list of themes you can test. If you followed to this point try running the code crypto_chart + theme_excel() or any of the other options listed below instead of + theme_excel(): https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/ 5.2.2 plotly In some cases, its helpful to make a chart responsive to a cursor hovering over it. We can convert any ggplot into an interactive chart by using the plotly (Sievert et al. 2020) package, and it is super easy! We already imported the plotly package in the setup section, so all we need to do is wrap our chart in the function ggplotly(): ggplotly(crypto_chart) Use your mouse to hover over specific points on the chart above. Also notice that we did not overwrite the crypto_chart object, but are just displaying the results. If you are not looking to convert a ggplot to be interactive, plotly also provides its own framework for making charts from scratch, you can find out more about it here: https://plotly.com/r/ 5.2.3 ggpubr The ggpubr (Kassambara 2020) extension provides a lot of functionality that we wont cover here, but one function we can use from this extension is stat_cor, which allows us to add a correlation coefficient (R) and p-value to the chart. crypto_chart &lt;- crypto_chart + stat_cor() # Show chart crypto_chart We will dive deeper into these metrics in the section where we evaluate the performance of the models. 5.2.4 ggforce The ggforce package (Pedersen 2020) is a useful tool for annotating charts. We can annotate outliers for example: crypto_chart &lt;- crypto_chart + geom_mark_ellipse(aes(filter = price_usd == max(price_usd), label = date_time_utc, description = paste0(&#39;Price spike to $&#39;, price_usd))) + # Now the same to circle the minimum price: geom_mark_ellipse(aes(filter = price_usd == min(price_usd), label = date_time_utc, description = paste0(&#39;Price drop to $&#39;, price_usd))) When using the geom_mark_ellipse() function we are passing the data argument, the label and the description through the aes() function. We are marking two points, one for the minimum price during the time period, and one for the maximum price. For the first point we filter the data to only the point where the price_usd was equal to the max(price_usd) and add the labels accordingly. The same is done for the second point, but showing the lowest price point for the given date range. Now view the new chart: crypto_chart Notice that this chart is specifically annotated around these points, but we never specified the specific dates to circle, and we are always circling the maximum and minimum values regardless of the specific data. One of the points of this document is to show the idea that when it comes to data analysis, visualizations, and reporting, most people in the workplace approach these as one time tasks, but with the proper (open source/free) tools automation and reproducibility becomes a given, and any old analysis can be run again to get the exact same results, or could be performed on the most recent view of the data using the same exact methodology. 5.2.5 gganimate We can also extend the functionality of ggplot by using the gganimate (Pedersen and Robinson 2020) package, which allows us to create an animated GIF that iterates over groups in the data through the use of the transition_states() function. animated_prices &lt;- ggplot(data = mutate(cryptodata, groups=symbol), aes(x = date_time_utc, y = price_usd)) + geom_line() + theme_economist() + transition_states(groups) + ggtitle(&#39;Price Over Time&#39;,subtitle = &#39;{closest_state}&#39;) + stat_smooth() + view_follow() # this adjusts the axis based on the group # Show animation (slowed to 1 frame per second): animate(animated_prices,fps=1) We recommend consulting this documentation for simple and straightforward examples on using gganimate: https://gganimate.com/articles/gganimate.html 5.2.6 ggTimeSeries The ggTimeSeries (Kothari 2018) package has functionality that is helpful in plotting time series data. We can create a calendar heatmap of the price over time using the ggplot_calendar_heatmap() function: calendar_heatmap &lt;- ggplot_calendar_heatmap(eth_data,&#39;date_time_utc&#39;,&#39;price_usd&#39;) #or do target_percent_change here? calendar_heatmap DoW on the y-axis stands for Day of the Week To read this chart in the correct date order start from the top left and work your way down and to the right once you reach the bottom of the column. The lighter the color the higher the price on the specific day. 5.2.7 Rayshader The previous chart is helpful, but a color scale like that can be a bit difficult to interpret. We could convert the previous chart into a 3d figure that is easier to visually interpret by using the amazing rayshader (Morgan-Wall 2020) package. This document runs automatically through GitHub Actions, which does not have a graphical environment to run the code below, which prevents it from refreshing the results with the latest data. We are showing old results for the rayshader section below. If you have gotten to this point, it is worth running the code below yourself on the latest data to see this amazing package in action! # First remove the title from the legend to avoid visual issues calendar_heatmap &lt;- calendar_heatmap + theme(legend.title = element_blank()) # Add the date to the title to make it clear these refresh twice daily calendar_heatmap &lt;- calendar_heatmap + ggtitle(paste0(&#39;Through: &#39;,substr(max(eth_data$date_time_utc),1,10))) # Convert to 3d plot plot_gg(calendar_heatmap, zoom = 0.60, phi = 35, theta = 45) # Render snapshot render_snapshot(&#39;rayshader_image.png&#39;) # Close RGL (which opens on plot_gg() command in a separate window) rgl.close() This is the same two dimensional calendar heatmap that was made earlier. Because we can programmatically adjust the camera as shown above, that means that we can also create a snapshot, move the camera and take another one, and keep going until we have enough to make it look like a video! This is not difficult to do using the render_movie() function, which will take care of everything behind the scenes for the same plot as before: # This time let&#39;s remove the scale too since we aren&#39;t changing it: calendar_heatmap &lt;- calendar_heatmap + theme(legend.position = &quot;none&quot;) # Same 3d plot as before plot_gg(calendar_heatmap, zoom = 0.60, phi = 35, theta = 45) # Render movie render_movie(&#39;rayshader_video.mp4&#39;) # Close RGL rgl.close() Click on the video below to play the output Video We also recommend checking out the incredible work done by Tyler Morgan Wall on his website using rayshader and rayrender. Awesome work! Move on to the next section  to start focusing our attention on making predictive models. References "],["model-validation-plan.html", "Section - 6 Model Validation Plan 6.1 Testing Models 6.2 Cross Validation 6.3 Fix Data by Split 6.4 Nest data", " Section - 6 Model Validation Plan Before making predictive models, we need to be careful in considering the ways by which we will be able to define a predictive model as being good or bad. We do not want to deploy a predictive model before having a good understanding of how we expect the model to perform once used in the real world. We will likely never get a 100% accurate representation of what the model will actually perform like in the real world without actually tracking those results over time, but there are ways for us to get a sense of whether something works or not ahead of time, as well as ensuring no blatant mistakes were made when training the models. 6.1 Testing Models The simplest method of getting a sense of the efficacy of a predictive model is to take a majority of the data (usually around 80% of the observations) and assign it to be the train dataset, which the predictive models use to learn the statistical patterns in the data that can then be used to make predictions about the future. Using the rest of the data which has not yet been seen by the statistical models (referred to as the test dataset), we can assess if the statistical models work on the new data in the way that we would expect based on the results obtained on the train dataset. If the results are consistent between the two, this is a good sign. 6.2 Cross Validation If we do this multiple times (a process referred to as cross validation) we have even more information at our disposal to understand how good the model is at predicting data it has not seen before. If the results on the test data are much worse than those obtained on the train data, this could be a sign of overfitting which means the model created overspecialized itself on the training data, and it is not very good at predicting new data because it learned the exact patterns of the training data instead of understanding the actual relationships between the different variables. Always beware of results that are too good to be true. It is more likely a mistake was made somewhere in the process. It is easy to make mistakes, which is why we need a good system to easily catch those mistakes. This is a longer discussion in its own right, but it is also important to consider how the data used to trained the model will be utilized in the context of making a new prediction; if a variable used to train the model is not available when making a new prediction, that is simply not going to work. In our context, it is also important to consider the date/time aspect of the data. For example, if we used data later into the future for the train dataset relative to the test data, could this give the model more information that would actually be available to it when it is time to make a new prediction? It absolutely could because the columns with the lagged prices represent prices from the past, which could be giving away the solution to the test data in a way that could not be leveraged when it is time to make new predictions. Therefore, when splitting the data into train/test datasets we will keep track of when the data was collected using time aware cross validation. 6.2.1 Time Aware Cross Validation Because of the issues just discussed above, we will need to make sure that the train data was always collected before the test data was. This is what we mean by time aware. We will then use cross validation in the sense that we will create 5 different train/test splits to assess the accuracy of the models. From those 5, we will take the test split containing the most recent data, and consider this to be our holdout dataset. The holdout dataset represents the most recent version of the world that we can compare the performance of the models against, and will give us an additional way of assessing their accuracy. This will leave us with: 5 train datasets to build predictive models from. 4 test datasets to assess the performance of the first 4 trained models against. Is the model able to predict price movements accurately and consistently when trained and tested on 4 independent subsets of the data? 1 holdout dataset to assess the performance of all 5 trained models. How accurate are the models at predicting the most recent subset of the data that we can assess? The explanation above is really important to understand! The code and implementation of this step specifically not so much, however. Focus on understanding the idea conceptually as outlined above rather than understanding the code used below. In the code below we are adding two new columns. First the split, which assigns each observation a number 1 through 5 of the cross validation split that the data belongs to based on when it was collected. Then the training column, which identifies each row as being part of the train, test, or holdout data of the given split. We will not walk through the steps of the code below in detail outside of the comments left throughout the code because we would rather focus our attention on the conceptual understanding for this step as outlined above. There are many ways of doing time aware cross validation, but none worked particularly well for the way we wanted to outline the next sections, so we made our own and its not important to understand how this is working, but it is also not that complex and uses the same tools used up to this point in this section. See this section of the high-level tutorial for an approach that can be used on datasets outside of the one used in this tutorial, and is compatible with the tools used in the predictive modeling section of both versions. # Remove rows with null date_time_utc to exclude missing data from next steps cryptodata &lt;- drop_na(cryptodata, date_time_utc) # Counts by symbol cryptodata &lt;- mutate(group_by(cryptodata, symbol), tot_rows = n()) # Add row index by symbol cryptodata &lt;- mutate(arrange(cryptodata, date_time_utc), row_id = seq_along(date_time_utc)) # Calculate what rows belong in the first split cryptodata &lt;- cryptodata %&gt;% mutate(split_rows_1 = as.integer(n()/5), split_rows_2 = as.integer(split_rows_1*2), split_rows_3 = as.integer(split_rows_1*3), split_rows_4 = as.integer(split_rows_1*4), split_rows_5 = as.integer(split_rows_1*5)) # Now calculate what split the current row_id belongs into cryptodata &lt;- mutate(cryptodata, split = case_when( row_id &lt;= split_rows_1 ~ 1, row_id &lt;= split_rows_2 ~ 2, row_id &lt;= split_rows_3 ~ 3, row_id &lt;= split_rows_4 ~ 4, row_id &gt; split_rows_4 ~ 5)) # Now figure out train/test groups cryptodata &lt;- cryptodata %&gt;% mutate(train_rows_1 = (as.integer(n()/5))*0.8, test_rows_1 = train_rows_1 + (as.integer(n()/5))*0.2, train_rows_2 = test_rows_1 + train_rows_1, test_rows_2 = train_rows_2 + (as.integer(n()/5))*0.2, train_rows_3 = test_rows_2 + train_rows_1, test_rows_3 = train_rows_3 + (as.integer(n()/5))*0.2, train_rows_4 = test_rows_3 + train_rows_1, test_rows_4 = train_rows_4 + (as.integer(n()/5))*0.2, train_rows_5 = test_rows_4 + train_rows_1, test_rows_5 = train_rows_5 + (as.integer(n()/5))*0.2) # Now assign train/test groups cryptodata &lt;- mutate(cryptodata, training = case_when( row_id &lt;= train_rows_1 ~ &#39;train&#39;, row_id &lt;= test_rows_1 ~ &#39;test&#39;, row_id &lt;= train_rows_2 ~ &#39;train&#39;, row_id &lt;= test_rows_2 ~ &#39;test&#39;, row_id &lt;= train_rows_3 ~ &#39;train&#39;, row_id &lt;= test_rows_3 ~ &#39;test&#39;, row_id &lt;= train_rows_4 ~ &#39;train&#39;, row_id &lt;= test_rows_4 ~ &#39;test&#39;, row_id &lt;= train_rows_5 ~ &#39;train&#39;, row_id &gt; train_rows_5 ~ &#39;holdout&#39;)) # Remove all columns that are no longer needed now cryptodata &lt;- select(cryptodata, -(tot_rows:test_rows_5), -(trade_usd_1:trade_usd_5), -(ask_1_price:bid_5_quantity), -pair, -quote_currency, -pkDummy, -pkey, -ts_index, split) Our data now has the new columns training (train, test or holdout) and split (numbers 1-5) added to it, lets take a look at the new columns: select(cryptodata, training, split) ## # A tibble: 235,083 x 3 ## # Groups: symbol [150] ## symbol training split ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 BTC train 1 ## 2 ETH train 1 ## 3 EOS train 1 ## 4 LTC train 1 ## 5 BSV train 1 ## 6 ADA train 1 ## 7 ZEC train 1 ## 8 TRX train 1 ## 9 HT train 1 ## 10 XMR train 1 ## # ... with 235,073 more rows Notice that even though we left symbol variables out of our selection, but because it is part of the way we grouped our data, it was added back in with the message Adding missing grouping variables symbol. The data is tied to its groupings when performing all operations until we use ungroup() to undo them. Lets add the new split column to the way the data is grouped: cryptodata &lt;- group_by(cryptodata, symbol, split) The new field split, helps us split the data into 5 different datasets based on the date, and contains a number from 1-5. The new field training flags the data as being part of the train dataset, or the test, or the holdout (for the first split) dataset for each of the 5 splits/datasets. Running the same code as before with tail() added, we can see rows associated with the test data of the 5th split (again remember, each of the 5 splits has a training and testing dataset): tail( select(cryptodata, training, split) ) ## # A tibble: 6 x 3 ## # Groups: symbol, split [6] ## symbol training split ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 TBC holdout 5 ## 2 EURS holdout 5 ## 3 NMR holdout 5 ## 4 CELR holdout 5 ## 5 GBX holdout 5 ## 6 ICP holdout 5 The easiest way to understand these groupings, is to visualize them: groups_chart &lt;- ggplot(cryptodata, aes(x = date_time_utc, y = split, color = training)) + geom_point() # now show the chart we just saved: groups_chart The chart above looks strange because it includes all cryptocurrencies when they are treated independently. We can view the results for the BTC cryptocurrency only by running the same code as above, but instead of visualizing the dataset in its entirety, filtering the data using filter(cryptodata, symbol == \"BTC\"), which will give us a much better impression of the breakdown that has been created: ggplot(filter(cryptodata, symbol == &#39;BTC&#39;), aes(x = date_time_utc, y = split, color = training)) + geom_point() We can check on the groupings for each cryptocurrency by animating the cryptodata object: animated_chart &lt;- groups_chart + transition_states(symbol) + ggtitle(&#39;Now showing: {closest_state}&#39;) # show the new animated chart animate(animated_chart, fps = 2) It can be a bit hard to tell how many data points there are because they end up looking like lines. Lets change the plot to use geom_jitter() instead of geom_point(), which will manually offset the points and give us a better impression of how many data points there are: animated_chart &lt;- animated_chart + geom_jitter() # show the new animated chart animate(animated_chart, fps = 2) 6.3 Fix Data by Split Now that we have split the data into many different subsets, those subsets themselves may have issues that prevent the predictive models from working as expected. 6.3.1 Zero Variance One of the first models we will make in the next section is a simple linear regression model. The regular R function for this will not work if the data contains any columns that have zero variance, meaning the value of the column never changes throughout the data being given to the model. Therefore, lets fix any issues relating to zero variance columns in any dataset before we change the structure of the data in the step after this one. First lets change the grouping of the data. We are interested in calculating the zero variance based on the symbol, split, and training fields: cryptodata &lt;- group_by(cryptodata, symbol, split, training) Now lets create a new object called find_zero_var which shows the value of the minimum standard deviation across all columns and calculated based on the grouping of symbol, split and train: find_zero_var &lt;- select(mutate(cryptodata, min_sd = min(sd(price_usd, na.rm=T), sd(target_price_24h, na.rm=T), sd(lagged_price_1h, na.rm=T), sd(lagged_price_2h, na.rm=T), sd(lagged_price_3h, na.rm=T), sd(lagged_price_6h, na.rm=T), sd(lagged_price_12h, na.rm=T), sd(lagged_price_24h, na.rm=T))), min_sd) # Show data find_zero_var ## # A tibble: 235,083 x 4 ## # Groups: symbol, split, training [1,500] ## symbol split training min_sd ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 BTC 1 train 758. ## 2 ETH 1 train 119. ## 3 EOS 1 train 0.0402 ## 4 LTC 1 train 2.94 ## 5 BSV 1 train 2.30 ## 6 ADA 1 train 0.0197 ## 7 ZEC 1 train 3.49 ## 8 TRX 1 train 0.00158 ## 9 HT 1 train 0.145 ## 10 XMR 1 train 7.09 ## # ... with 235,073 more rows Next lets get to a list of cryptocurrency symbols where the minimum standard deviation across all columns for all splits of the data is 0, which is the list of cryptocurrencies we want to later remove from the data: minimum_sd &lt;- filter(distinct(mutate(group_by(ungroup(find_zero_var), symbol), min_sd = min(min_sd, na.rm=T)), min_sd),min_sd &lt; 0.0001)$symbol # Show result minimum_sd ## [1] &quot;SEELE&quot; &quot;DGB&quot; &quot;MBL&quot; &quot;VSYS&quot; &quot;IQ&quot; &quot;DENT&quot; &quot;RCN&quot; &quot;ETP&quot; &quot;CND&quot; ## [10] &quot;NAV&quot; &quot;JST&quot; &quot;MXC&quot; &quot;SWFTC&quot; &quot;JASMY&quot; &quot;SLP&quot; &quot;ARNM&quot; &quot;EDGT&quot; &quot;BTRST&quot; ## [19] &quot;SPELL&quot; &quot;NEU&quot; &quot;NFT&quot; &quot;GODS&quot; &quot;USDD&quot; &quot;NXT&quot; &quot;AMB&quot; &quot;LUNC&quot; &quot;MESH&quot; ## [28] &quot;G999&quot; &quot;BCUG&quot; &quot;FEI&quot; &quot;CLO&quot; &quot;ORBS&quot; &quot;DEG&quot; &quot;DACXI&quot; &quot;ONG&quot; &quot;TBC&quot; ## [37] &quot;GBX&quot; &quot;CKB&quot; &quot;NTK&quot; &quot;XPNT&quot; &quot;KRRX&quot; &quot;POLIS&quot; &quot;MAID&quot; &quot;PSL&quot; &quot;SUB&quot; ## [46] &quot;NCT&quot; &quot;EKO&quot; &quot;ZKS&quot; &quot;SMT&quot; &quot;APPC&quot; &quot;PHB&quot; &quot;ATLAS&quot; &quot;RGT&quot; Now we can remove these symbols from appearing in the dataset: cryptodata &lt;- filter(cryptodata, !(symbol %in% minimum_sd)) In the code above we match all rows where the symbol is part of the minimum_sd object with the list of cryptocurrency symbols to remove from the data, and we then negate the selection using the ! operator to only keep rows with symbols not in the list we found. 6.4 Nest data The underlying data structure we have been using up to this point is that of a data frame. This data type supports values of many kinds inside of its cells, so far we have seen things like numbers, strings, and dates, but we can also store an entire other data frame as a value. Doing this is called nesting the data. The steps taken below and in the predictive modeling section that comes later use a similar approach to the work published by Hadley Wickham on the subject (Wickham and Grolemund 2017). Here is an example of what happens when we nest() the data: nest(cryptodata) ## # A tibble: 970 x 4 ## # Groups: symbol, training, split [970] ## symbol training split data ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;list&gt; ## 1 BTC train 1 &lt;tibble [268 x 11]&gt; ## 2 ETH train 1 &lt;tibble [268 x 11]&gt; ## 3 EOS train 1 &lt;tibble [268 x 11]&gt; ## 4 LTC train 1 &lt;tibble [268 x 11]&gt; ## 5 BSV train 1 &lt;tibble [268 x 11]&gt; ## 6 ADA train 1 &lt;tibble [268 x 11]&gt; ## 7 ZEC train 1 &lt;tibble [268 x 11]&gt; ## 8 TRX train 1 &lt;tibble [268 x 11]&gt; ## 9 HT train 1 &lt;tibble [268 x 11]&gt; ## 10 XMR train 1 &lt;tibble [268 x 11]&gt; ## # ... with 960 more rows We will begin by creating the new column containing the nested train data. Some additional steps were added to ensure the integrity of the data before we start training it, but these are not material outside of the things we have already discussed up to this point. Try to focus on the conceptual idea that we are creating a new dataset grouped by the symbol, training and split columns. As a first step, we are creating a new dataframe called cryptodata_train grouped by the symbol and split columns with the nested dataframes in the new train_data column: cryptodata_train &lt;- rename(nest(filter(cryptodata, training==&#39;train&#39;)), train_data = &#39;data&#39;) # Now remove training column cryptodata_train &lt;- select(ungroup(cryptodata_train, training), -training) # Fix issues with individual groups of the data cryptodata_train$train_data &lt;- lapply(cryptodata_train$train_data, na.omit) # First add new column with nrow of train dataset cryptodata_train &lt;- group_by(ungroup(mutate(rowwise(cryptodata_train), train_rows = nrow(train_data))), symbol, split) # Remove all symbols where their train data has less than 20 rows at least once symbols_rm &lt;- unique(filter(cryptodata_train, split &lt; 5, train_rows &lt; 20)$symbol) # Remove all data relating to the symbols found above cryptodata_train &lt;- filter(cryptodata_train, ! symbol %in% symbols_rm) # ! is to make %not in% operator # Drop train_rows column cryptodata_train &lt;- select(cryptodata_train, -train_rows) # Show results cryptodata_train ## # A tibble: 485 x 3 ## # Groups: symbol, split [485] ## symbol split train_data ## &lt;chr&gt; &lt;dbl&gt; &lt;list&gt; ## 1 BTC 1 &lt;tibble [196 x 11]&gt; ## 2 ETH 1 &lt;tibble [196 x 11]&gt; ## 3 EOS 1 &lt;tibble [196 x 11]&gt; ## 4 LTC 1 &lt;tibble [196 x 11]&gt; ## 5 BSV 1 &lt;tibble [196 x 11]&gt; ## 6 ADA 1 &lt;tibble [196 x 11]&gt; ## 7 ZEC 1 &lt;tibble [196 x 11]&gt; ## 8 TRX 1 &lt;tibble [196 x 11]&gt; ## 9 HT 1 &lt;tibble [196 x 11]&gt; ## 10 XMR 1 &lt;tibble [196 x 11]&gt; ## # ... with 475 more rows Now lets repeat the same process but on the test data to create the cryptodata_test object: cryptodata_test &lt;- select(rename(nest(filter(cryptodata, training==&#39;test&#39;)), test_data = &#39;data&#39;), -training) # Now remove training column cryptodata_test &lt;- select(ungroup(cryptodata_test, training), -training) # Show nested data cryptodata_test ## # A tibble: 388 x 3 ## # Groups: symbol, split [388] ## symbol split test_data ## &lt;chr&gt; &lt;dbl&gt; &lt;list&gt; ## 1 GAS 1 &lt;tibble [59 x 11]&gt; ## 2 LEVL 1 &lt;tibble [62 x 11]&gt; ## 3 T 1 &lt;tibble [61 x 11]&gt; ## 4 ALCX 1 &lt;tibble [62 x 11]&gt; ## 5 STETH 1 &lt;tibble [54 x 11]&gt; ## 6 USG 1 &lt;tibble [63 x 11]&gt; ## 7 KMD 1 &lt;tibble [64 x 11]&gt; ## 8 INJ 1 &lt;tibble [62 x 11]&gt; ## 9 BRD 1 &lt;tibble [65 x 11]&gt; ## 10 GMTT 1 &lt;tibble [65 x 11]&gt; ## # ... with 378 more rows As well as the holdout data to create the cryptodata_holdout object: cryptodata_holdout &lt;- rename(nest(filter(cryptodata, training==&#39;holdout&#39;)), holdout_data = &#39;data&#39;) # Remove split and training columns from holdout cryptodata_holdout &lt;- select(ungroup(cryptodata_holdout, split, training), -split, -training) # Show nested data cryptodata_holdout ## # A tibble: 97 x 2 ## # Groups: symbol [97] ## symbol holdout_data ## &lt;chr&gt; &lt;list&gt; ## 1 XCN &lt;tibble [53 x 11]&gt; ## 2 CBC &lt;tibble [60 x 11]&gt; ## 3 BRD &lt;tibble [67 x 11]&gt; ## 4 STETH &lt;tibble [57 x 11]&gt; ## 5 CELR &lt;tibble [70 x 11]&gt; ## 6 SPI &lt;tibble [54 x 11]&gt; ## 7 WAXP &lt;tibble [70 x 11]&gt; ## 8 LEVL &lt;tibble [63 x 11]&gt; ## 9 BTC &lt;tibble [72 x 11]&gt; ## 10 ETH &lt;tibble [72 x 11]&gt; ## # ... with 87 more rows 6.4.1 Join Results Now we can take the results that we grouped for each subset cryptodata_train, cryptodata_test, and cryptodata_holdout, and we can join the results to have all three new columns train_data, test_data, and holdout_data in a single new dataframe, which we will call cryptodata_nested: # Join train and test cryptodata_nested &lt;- left_join(cryptodata_train, cryptodata_test, by = c(&quot;symbol&quot;, &quot;split&quot;)) # Show new data cryptodata_nested ## # A tibble: 485 x 4 ## # Groups: symbol, split [485] ## symbol split train_data test_data ## &lt;chr&gt; &lt;dbl&gt; &lt;list&gt; &lt;list&gt; ## 1 BTC 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11]&gt; ## 2 ETH 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11]&gt; ## 3 EOS 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11]&gt; ## 4 LTC 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11]&gt; ## 5 BSV 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11]&gt; ## 6 ADA 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11]&gt; ## 7 ZEC 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11]&gt; ## 8 TRX 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11]&gt; ## 9 HT 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11]&gt; ## 10 XMR 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11]&gt; ## # ... with 475 more rows The by argument used above defines the key to use to join the data by, in this case the cryptocurrency symbol, as well as the specific split. Next, lets join the new dataframe we just created cryptodata_nested to the holdout data as well and add the holdout_data column. In this case, we will want to keep the holdout data consistent for all 5 splits of a cryptocurrency instead of matching the data to a particular split; the models trained on the data from splits 1 through 5 will each have a different test dataset, but all 5 models will then be tested against the same holdout. Therefore, this time in the join() performed below we are only supplying the cryptocurrency symbol for the by parameter: cryptodata_nested &lt;- left_join(cryptodata_nested, cryptodata_holdout, by = &quot;symbol&quot;) Now we have our completed dataset that will allow us to iterate through each option and create many separate models as was discussed throughout this section: cryptodata_nested ## # A tibble: 485 x 5 ## # Groups: symbol, split [485] ## symbol split train_data test_data holdout_data ## &lt;chr&gt; &lt;dbl&gt; &lt;list&gt; &lt;list&gt; &lt;list&gt; ## 1 BTC 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11]&gt; &lt;tibble [72 x 11]&gt; ## 2 ETH 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11]&gt; &lt;tibble [72 x 11]&gt; ## 3 EOS 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11]&gt; &lt;tibble [70 x 11]&gt; ## 4 LTC 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11]&gt; &lt;tibble [72 x 11]&gt; ## 5 BSV 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11]&gt; &lt;tibble [72 x 11]&gt; ## 6 ADA 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11]&gt; &lt;tibble [72 x 11]&gt; ## 7 ZEC 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11]&gt; &lt;tibble [72 x 11]&gt; ## 8 TRX 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11]&gt; &lt;tibble [70 x 11]&gt; ## 9 HT 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11]&gt; &lt;tibble [72 x 11]&gt; ## 10 XMR 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11]&gt; &lt;tibble [68 x 11]&gt; ## # ... with 475 more rows Move on to the next section  to build the predictive models using the methodology discussed in this section. References "],["predictive-modeling.html", "Section - 7 Predictive Modeling 7.1 Example Simple Model 7.2 Caret 7.3 Make Predictions 7.4 Timeseries", " Section - 7 Predictive Modeling We finally have everything we need to start making predictive models now that the data has been cleaned and we have come up with a gameplan to understand the efficacy of the models. 7.1 Example Simple Model We can start by making a simple linear regression model: lm(formula = target_price_24h ~ ., data = cryptodata) ## ## Call: ## lm(formula = target_price_24h ~ ., data = cryptodata) ## ## Coefficients: ## (Intercept) symbolABBC symbolADA symbolALCX ## 1606.29623792 0.75118105 -0.02700414 3.49304933 ## symbolALICE symbolANKR symbolARDR symbolATA ## 0.20503884 -0.08053032 -0.07449520 -0.05785297 ## symbolATOM symbolAVA symbolBAKE symbolBAL ## 1.41356423 0.01060629 -0.05289831 0.70331525 ## symbolBAT symbolBCH symbolBDX symbolBICO ## -0.04131637 15.76689959 -0.08196869 -0.03378752 ## symbolBNT symbolBRD symbolBSV symbolBTC ## -0.11131576 -0.53460399 6.92327031 2698.87506059 ## symbolBTG symbolCBC symbolCELR symbolCHZ ## 3.07759373 0.17393984 -0.18591524 -0.06633695 ## symbolCOCOS symbolCROOLD symbolCRPT symbolDASH ## 0.73935845 -0.07232955 0.10042271 5.88747161 ## symbolDCR symbolDODO symbolDOT symbolDYDX ## 3.58781856 -0.06996112 0.88058146 0.14644028 ## symbolENJ symbolEOS symbolETC symbolETH ## -0.01617822 0.08317288 5.02367432 203.68408480 ## symbolEURS symbolFIDA symbolFTT symbolGAS ## 0.02409871 0.40232725 3.39341020 0.51340591 ## symbolGMT symbolGMTT symbolHT symbolICP ## 0.01396818 -0.44042222 0.49194901 0.75847330 ## symbolINJ symbolIOST symbolIOTA symbolKLAY ## 0.21449523 -0.08709691 -0.05149669 -0.07273575 ## symbolKMD symbolKNC symbolLEO symbolLEVL ## 0.00087014 0.12298145 0.55127816 -0.65727917 ## symbolLINA symbolLSK symbolLTC symbolMANA ## -0.08745569 0.05427831 7.16301722 0.02177843 ## symbolMC symbolMIR symbolMTLX symbolNEAR ## -0.08461771 -0.21763004 -0.06639846 0.47329549 ## symbolNEXO symbolNMR symbolOAX symbolPERP ## 0.01969397 2.18081426 0.55896718 0.01059500 ## symbolPLC symbolPLI symbolQTUM symbolREN ## 0.40295768 -0.07224096 0.35072795 -0.07256461 ## symbolRIF symbolRLY symbolRUNE symbolSAND ## -0.08024827 0.14303677 0.19725789 0.05113385 ## symbolSFP symbolSKL symbolSNX symbolSPI ## -0.02939337 -0.08186199 0.31451749 0.93494125 ## symbolSTETH symbolSTORJ symbolSXP symbolT ## 187.34698185 0.13210834 -0.03876614 -0.15881769 ## symbolTHETA symbolTOMO symbolTORN symbolTRIBE ## 0.07032435 -0.02099180 1.82558007 -0.06182251 ## symbolTRX symbolUMA symbolUSG symbolVGX ## -0.10182444 0.30834831 190.74998163 0.20703470 ## symbolVIB symbolWAXP symbolXCH symbolXCN ## 0.00679275 -0.08501123 4.78000523 0.01293237 ## symbolXDC symbolXEM symbolXMR symbolZEC ## -0.08553898 -0.08223013 19.13900430 7.92492613 ## symbolZRX date_time_utc date price_usd ## -0.04842442 0.00000677 -0.66859884 0.83053731 ## lagged_price_1h lagged_price_2h lagged_price_3h lagged_price_6h ## 0.16576677 0.00088533 -0.04234613 -0.04565388 ## lagged_price_12h lagged_price_24h lagged_price_3d trainingtest ## 0.01758203 -0.00107571 -0.04926538 -0.56099785 ## trainingtrain split ## 3.47485695 -0.24842762 We defined the formula for the model as target_price_24h ~ ., which means that we are want to make predictions for the target_price_24h field, and use (~) every other column found in the data (.). In other words, we specified a model that uses the target_price_24h field as the dependent variable, and all other columns (.) as the independent variables. Meaning, we are looking to predict the target_price_24h, which is the only column that refers to the future, and use all the information available at the time the rest of the data was collected in order to infer statistical relationships that can help us forecast the future values of the target_price_24h field when it is still unknown on new data that we want to make new predictions for. In the example above we used the cryptodata object which contained all the non-nested data, and was a big oversimplification of the process we will actually use. 7.1.1 Using Functional Programming From this point forward, we will deal with the new dataset cryptodata_nested, review the previous section where it was created if you missed it. Here is a preview of the data again: cryptodata_nested ## # A tibble: 485 x 5 ## # Groups: symbol, split [485] ## symbol split train_data test_data holdout_data ## &lt;chr&gt; &lt;dbl&gt; &lt;list&gt; &lt;list&gt; &lt;list&gt; ## 1 BTC 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11]&gt; &lt;tibble [72 x 11]&gt; ## 2 ETH 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11]&gt; &lt;tibble [72 x 11]&gt; ## 3 EOS 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11]&gt; &lt;tibble [70 x 11]&gt; ## 4 LTC 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11]&gt; &lt;tibble [72 x 11]&gt; ## 5 BSV 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11]&gt; &lt;tibble [72 x 11]&gt; ## 6 ADA 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11]&gt; &lt;tibble [72 x 11]&gt; ## 7 ZEC 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11]&gt; &lt;tibble [72 x 11]&gt; ## 8 TRX 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11]&gt; &lt;tibble [70 x 11]&gt; ## 9 HT 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11]&gt; &lt;tibble [72 x 11]&gt; ## 10 XMR 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11]&gt; &lt;tibble [68 x 11]&gt; ## # ... with 475 more rows Because we are now dealing with a nested dataframe, performing operations on the individual nested datasets is not as straightforward. We could extract the individual elements out of the data using indexing, for example we can return the first element of the column train_data by running this code: cryptodata_nested$train_data[[1]] ## # A tibble: 196 x 11 ## date_time_utc date price_usd target_price_24h lagged_price_1h ## &lt;dttm&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2022-07-11 00:00:01 2022-07-11 20866. 19962. 20843. ## 2 2022-07-11 01:00:00 2022-07-11 20815. 19819. 20866. ## 3 2022-07-11 02:00:01 2022-07-11 20553. 19893. 20815. ## 4 2022-07-11 03:00:01 2022-07-11 20547. 19972. 20553. ## 5 2022-07-12 00:00:01 2022-07-12 19962. 19331. 20006. ## 6 2022-07-12 01:00:01 2022-07-12 19819. 19428. 19962. ## 7 2022-07-12 02:00:01 2022-07-12 19893. 19428. 19819. ## 8 2022-07-12 03:00:01 2022-07-12 19972. 19507. 19893. ## 9 2022-07-12 04:00:01 2022-07-12 19943. 19473. 19972. ## 10 2022-07-12 05:00:00 2022-07-12 20006. 19480. 19943. ## # ... with 186 more rows, and 6 more variables: lagged_price_2h &lt;dbl&gt;, ## # lagged_price_3h &lt;dbl&gt;, lagged_price_6h &lt;dbl&gt;, lagged_price_12h &lt;dbl&gt;, ## # lagged_price_24h &lt;dbl&gt;, lagged_price_3d &lt;dbl&gt; remove STORJ to resolve weird problem that arose March 3rd, 2021: cryptodata_nested &lt;- filter(cryptodata_nested, symbol != &quot;STORJ&quot;) As we already saw dataframes are really flexible as a data structure. We can create a new column in the data to store the models themselves that are associated with each row of the data. There are several ways that we could go about doing this (this tutorial itself was written to execute the same commands using three fundamentally different methodologies), but in this tutorial we will take a functional programming approach. This means we will focus the operations we will perform on the actions we want to take themselves, which can be contrasted to a for loop which emphasizes the objects more using a similar structure that we used in the example above showing the first element of the train_data column. When using a functional programming approach, we first need to create functions for the operations we want to perform. Lets wrap the lm() function we used as an example earlier and create a new custom function called linear_model, which takes a dataframe as an input (the train_data we will provide for each row of the nested dataset), and generates a linear regression model: linear_model &lt;- function(df){ lm(target_price_24h ~ . -date_time_utc -date, data = df) } We can now use the map() function from the purrr package in conjunction with the mutate() function from dplyr to create a new column in the data which contains an individual linear regression model for each row of train_data: mutate(cryptodata_nested, lm_model = map(train_data, linear_model)) ## # A tibble: 480 x 6 ## # Groups: symbol, split [480] ## symbol split train_data test_data holdout_data lm_model ## &lt;chr&gt; &lt;dbl&gt; &lt;list&gt; &lt;list&gt; &lt;list&gt; &lt;list&gt; ## 1 BTC 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11~ &lt;tibble [72 x 11~ &lt;lm&gt; ## 2 ETH 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11~ &lt;tibble [72 x 11~ &lt;lm&gt; ## 3 EOS 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11~ &lt;tibble [70 x 11~ &lt;lm&gt; ## 4 LTC 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11~ &lt;tibble [72 x 11~ &lt;lm&gt; ## 5 BSV 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11~ &lt;tibble [72 x 11~ &lt;lm&gt; ## 6 ADA 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11~ &lt;tibble [72 x 11~ &lt;lm&gt; ## 7 ZEC 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11~ &lt;tibble [72 x 11~ &lt;lm&gt; ## 8 TRX 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11~ &lt;tibble [70 x 11~ &lt;lm&gt; ## 9 HT 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11~ &lt;tibble [72 x 11~ &lt;lm&gt; ## 10 XMR 1 &lt;tibble [196 x 11]&gt; &lt;tibble [68 x 11~ &lt;tibble [68 x 11~ &lt;lm&gt; ## # ... with 470 more rows Awesome! Now we can use the same tools we learned in the high-level version to make a wider variety of predictive models to test 7.2 Caret Refer back to the high-level version of the tutorial for an explanation of the caret package, or consult this document: https://topepo.github.io/caret/index.html 7.2.1 Parallel Processing R is a single thredded application, meaning it only uses one CPU at a time when performing operations. The step below is optional and uses the parallel and doParallel packages to allow R to use more than a single CPU when creating the predictive models, which will speed up the process considerably: cl &lt;- makePSOCKcluster(detectCores()-1) registerDoParallel(cl) 7.2.2 More Functional Programming Now we can repeat the process we used earlier to create a column with the linear regression models to create the exact same models, but this time using the caret package. linear_model_caret &lt;- function(df){ train(target_price_24h ~ . -date_time_utc -date, data = df, method = &#39;lm&#39;, trControl=trainControl(method=&quot;none&quot;)) } We specified the method as lm for linear regression. See the high-level version for a refresher on how to use different methods to make different models: https://cryptocurrencyresearch.org/high-level/#/method-options. the trControl argument tells the caret package to avoid additional resampling of the data. As a default behavior caret will do re-sampling on the data and do hyperparameter tuning to select values to use for the paramters to get the best results, but we will avoid this discussion for this tutorial. See the official caret documentation for more details. Here is the full list of models that we can make using the caret package and the steps described the high-level version of the tutorial: We can now use the new function we created linear_model_caret in conjunction with map() and mutate() to create a new column in the cryptodata_nested dataset called lm_model with the trained linear regression model for each split of the data (by cryptocurrency symbol and split): cryptodata_nested &lt;- mutate(cryptodata_nested, lm_model = map(train_data, linear_model_caret)) We can see the new column called lm_model with the nested dataframe grouping variables: select(cryptodata_nested, lm_model) ## # A tibble: 480 x 3 ## # Groups: symbol, split [480] ## symbol split lm_model ## &lt;chr&gt; &lt;dbl&gt; &lt;list&gt; ## 1 BTC 1 &lt;train&gt; ## 2 ETH 1 &lt;train&gt; ## 3 EOS 1 &lt;train&gt; ## 4 LTC 1 &lt;train&gt; ## 5 BSV 1 &lt;train&gt; ## 6 ADA 1 &lt;train&gt; ## 7 ZEC 1 &lt;train&gt; ## 8 TRX 1 &lt;train&gt; ## 9 HT 1 &lt;train&gt; ## 10 XMR 1 &lt;train&gt; ## # ... with 470 more rows And we can view the summarized contents of the first trained model: cryptodata_nested$lm_model[[1]] ## Linear Regression ## ## 196 samples ## 10 predictor ## ## No pre-processing ## Resampling: None 7.2.3 Generalize the Function We can adapt the function we built earlier for the linear regression models using caret, and add a parameter that allows us to specify the method we want to use (as in what predictive model): model_caret &lt;- function(df, method_choice){ train(target_price_24h ~ . -date_time_utc -date, data = df, method = method_choice, trControl=trainControl(method=&quot;none&quot;)) } 7.2.4 XGBoost Models Now we can do the same thing we did earlier for the linear regression models, but use the new function called model_caret using the map2() function to also specify the model as xgbLinear to create an XGBoost model: cryptodata_nested &lt;- mutate(cryptodata_nested, xgb_model = map2(train_data, &quot;xgbLinear&quot;, model_caret)) We wont dive into the specifics of each individual model as the correct one to use may depend on a lot of factors and that is a discussion outside the scope of this tutorial. We chose to use the XGBoost model as an example because it has recently gained a lot of popularity as a very effective framework for a variety of problems, and is an essential model for any data scientist to have at their disposal. There are several possible configurations for XGBoost models, you can find the official documentation here: https://xgboost.readthedocs.io/en/latest/parameter.html 7.2.5 Neural Network Models We can keep adding models. As we saw, caret allows for the usage of over 200 predictive models. Lets make another set of models, this time setting the method to dnn to create deep neural networks : cryptodata_nested &lt;- mutate(cryptodata_nested, nnet_model = map2(train_data, &quot;dnn&quot;, model_caret)) Again, we will not dive into the specifics of the individual models, but a quick Google search will return a myriad of information on the subject. 7.2.6 Random Forest Models Next lets use create Random Forest models using the method ctree cryptodata_nested &lt;- mutate(cryptodata_nested, rf_model = map2(train_data, &quot;ctree&quot;, model_caret)) 7.2.7 Principal Component Regression For one last set of models, lets make Principal Component Regression models using the method pcr cryptodata_nested &lt;- mutate(cryptodata_nested, pcr_model = map2(train_data, &quot;pcr&quot;, model_caret)) 7.2.8 Caret Options Caret offers some additional options to help pre-process the data as well. We outlined an example of this in the high-level version of the tutorial when showing how to make a Support Vector Machine model, which requires the data to be centered and scaled to avoid running into problems (which we wont discuss further here). 7.3 Make Predictions Awesome! We have trained the predictive models, and we want to start getting a better understanding of how accurate the models are on data they have never seen before. In order to make these comparisons, we will want to make predictions on the test and holdout datasets, and compare those predictions to what actually ended up happening. In order to make predictions, we can use the prediict() function, here is an example on the first elements of the nested dataframe: predict(object = cryptodata_nested$lm_model[[1]], newdata = cryptodata_nested$test_data[[1]], na.action = na.pass) ## 1 2 3 4 5 6 7 8 ## 23892.70 23726.71 24028.66 24273.72 24840.33 24786.30 24915.03 24965.28 ## 9 10 11 12 13 14 15 16 ## 24817.31 24714.22 25024.45 25067.39 25065.68 24923.99 24881.36 25118.10 ## 17 18 19 20 21 22 23 24 ## 25096.88 24812.86 24663.25 25020.18 24794.81 24713.40 24887.44 24719.72 ## 25 26 27 28 29 30 31 32 ## 24694.03 24868.47 24798.98 24534.79 24660.18 24351.56 24276.02 24256.04 ## 33 34 35 36 37 38 39 40 ## 24332.42 23863.93 24180.28 23899.14 23698.66 23735.69 23753.11 23249.36 ## 41 42 43 44 45 46 47 48 ## 23345.29 23762.68 23682.38 23632.19 23834.53 23830.75 23898.88 23848.22 ## 49 50 51 52 53 54 55 56 ## 23687.13 23896.51 23883.66 23780.84 23785.36 24002.23 24046.36 24202.79 ## 57 58 59 60 61 62 63 64 ## 24245.79 24247.77 24352.13 24282.44 24559.19 24560.01 24374.94 24469.13 ## 65 66 67 68 ## 24198.86 24036.80 24136.42 24184.49 Now we can create a new custom function called make_predictions that wraps this functionality in a way that we can use with map() to iterate through all options of the nested dataframe: make_predictions &lt;- function(model, test){ predict(object = model, newdata = test, na.action = na.pass) } Now we can create the new columns lm_test_predictions and lm_holdout_predictions with the predictions: cryptodata_nested &lt;- mutate(cryptodata_nested, lm_test_predictions = map2(lm_model, test_data, make_predictions), lm_holdout_predictions = map2(lm_model, holdout_data, make_predictions)) The predictions were made using the models that had only seen the training data, and we can start assessing how good the model is on data it has not seen before in the test and holdout sets. Lets view the results from the previous step: select(cryptodata_nested, lm_test_predictions, lm_holdout_predictions) ## # A tibble: 480 x 4 ## # Groups: symbol, split [480] ## symbol split lm_test_predictions lm_holdout_predictions ## &lt;chr&gt; &lt;dbl&gt; &lt;list&gt; &lt;list&gt; ## 1 BTC 1 &lt;dbl [68]&gt; &lt;dbl [72]&gt; ## 2 ETH 1 &lt;dbl [68]&gt; &lt;dbl [72]&gt; ## 3 EOS 1 &lt;dbl [68]&gt; &lt;dbl [70]&gt; ## 4 LTC 1 &lt;dbl [68]&gt; &lt;dbl [72]&gt; ## 5 BSV 1 &lt;dbl [68]&gt; &lt;dbl [72]&gt; ## 6 ADA 1 &lt;dbl [68]&gt; &lt;dbl [72]&gt; ## 7 ZEC 1 &lt;dbl [68]&gt; &lt;dbl [72]&gt; ## 8 TRX 1 &lt;dbl [68]&gt; &lt;dbl [70]&gt; ## 9 HT 1 &lt;dbl [68]&gt; &lt;dbl [72]&gt; ## 10 XMR 1 &lt;dbl [68]&gt; &lt;dbl [68]&gt; ## # ... with 470 more rows Now we can do the same for the rest of the models: cryptodata_nested &lt;- mutate(cryptodata_nested, # XGBoost: xgb_test_predictions = map2(xgb_model, test_data, make_predictions), # holdout xgb_holdout_predictions = map2(xgb_model, holdout_data, make_predictions), # Neural Network: nnet_test_predictions = map2(nnet_model, test_data, make_predictions), # holdout nnet_holdout_predictions = map2(nnet_model, holdout_data, make_predictions), # Random Forest: rf_test_predictions = map2(rf_model, test_data, make_predictions), # holdout rf_holdout_predictions = map2(rf_model, holdout_data, make_predictions), # PCR: pcr_test_predictions = map2(pcr_model, test_data, make_predictions), # holdout pcr_holdout_predictions = map2(pcr_model, holdout_data, make_predictions)) We are done using the caret package and can stop the parallel processing cluster: stopCluster(cl) In this example we used the caret package because it provides a straightforward option to create a variety of models, but there are several great similar alternatives to make a variety of models in both R and Python. Some noteworthy mentions are tidymodels, mlr, and scikit-learn. 7.4 Timeseries Because this tutorial is already very dense, we will just focus on the models we created above. When creating predictive models on timeseries data there are some other excellent options which consider when the information was collected in similar but more intricate ways to the way we did when creating the lagged variables. For more information on using excellent tools for ARIMA and ETS models, consult the high-level version of this tutorial where they were discussed. Move on to the next section  to assess the accuracy of the models as described in the previous section. "],["evaluate-model-performance.html", "Section - 8 Evaluate Model Performance 8.1 Summarizing models 8.2 Data Prep - Adjust Prices 8.3 Review Summary Statistics 8.4 Adjust Prices - All Models 8.5 Evaluate Metrics Across Splits 8.6 Evaluate R^2 8.7 Visualize Results 8.8 Interactive Dashboard 8.9 Visualizations - Historical Metrics", " Section - 8 Evaluate Model Performance Now we get to see the results of our hard work! There are some additional data preparation steps we need to take before we can visualize the results in aggregate; if you are just looking for the charts showing the results they are shown later on in the Visualize Results section below. 8.1 Summarizing models Because we know what really happened for the target variable in the test data we used in the previous step, we can get a good idea of how good the model performed on a dataset it has never seen before. We do this to avoid overfitting, which is the idea that the model may work really well on the training data we provided, but not on the new data that we want to predictions on. If the performance on the test set is good, that is a good sign. If the data is split into several subsets and each subset has consistent results for the training and test datasets, that is an even better sign the model may perform as expected. The first row of the data is for the BTC cryptocurrency for the split number 1. For this row of data (and all others), we made predictions for the test_data using a linear regression model and saved the results in the lm_test_predictions column. The models were trained on the train_data and had not yet seen the results from the test_data, so how accurate was the model in its predictions on this data? 8.1.1 MAE Each individual prediction can be compared to the observation of what actually happened, and for each prediction we can calculate the error between the two. We can then take all of the values for the error of the prediction relative to the actual observations, and summarize the performance as a Mean Absolute Error (MAE) of those values, which gives us a single value to use as an indicator of the accuracy of the model. The higher the MAE score, the higher the error, meaning the model performs worse when the value is larger. 8.1.2 RMSE A common metric to evaluate the performance of a model is the Root Mean Square Error, which is similar to the MAE but squares and then takes the square root of the values. An interesting implication of this, is that the RMSE will always be larger or equal to the MAE, where a large degree of error on a single observation would get penalized more by the RMSE. The higher the RMSE value, the worse the performance of the model, and can range from 0 to infinity, meaning there is no defined limit on the amount of error you could have (unlike the next metric). 8.1.3 R Squared The \\(R^2\\), also known as the coefficient of determination, is a measure that describes the strength in the correlation between the predictions made and the actual results. A value of 1.0 would mean that the predictions made were exactly identical to the actual results. A perfect score is usually concerning because even a great model shouldnt be exactly 100% accurate and usually indicates a mistake was made that gave away the results to the model and would not perform nearly as good when put into practice in the real world, but in the case of the \\(R^2\\) the higher the score (from 0 to 1) the better. 8.1.4 Get Metrics We can return the RMSE and \\(R^2\\) metrics for the BTC cryptocurrency and the split number 1 by using the postResample() function from the caret package: postResample(pred = cryptodata_nested$lm_test_predictions[[1]], obs = cryptodata_nested$test_data[[1]]$target_price_24h) ## RMSE Rsquared MAE ## 1578.81193560 0.04995418 1443.46023624 We can extract the first element to return the RMSE metric, and the second element for the R Squared (R^2) metric. We are using [[1]] to extract the first element of the lm_test_predictions and test_data and compare the predictions to the actual value of the target_price24h column. This model used the earliest subset of the data available for the cryptocurrency. How does the same model used to predict this older subset of the data perform when applied to the most recent subset of the data from the holdout? We can get the same summary of results comparing the lm_holdout_predictions to what actually happened to the target_price_24h column of the actual holdout_data: postResample(pred = cryptodata_nested$lm_holdout_predictions[[1]], obs = cryptodata_nested$holdout_data[[1]]$target_price_24h) ## RMSE Rsquared MAE ## NA 0.1033863 NA The result above may show a value of NA for the RMSE metric. We will explain and resolve the issue later on. 8.1.5 Comparing Metrics Why not just pick one metric and stick to it? We certainly could, but these two metrics complement each other. For example, if we had a model that always predicts a 0% price change for the time period, the model may have a low error but it wouldnt actually be very informative in the direction or magnitude of those movements and the predictions and actuals would not be very correlated with each other which would lead to a low \\(R^2\\) value. We are using both because it helps paint a more complete picture in this sense, and depending on the task you may want to use a different set of metrics to evaluate the performance. It is also worth mentioning that if your target variable you are predicting is either 0 or 1, this would be a classification problem where different metrics become more appropriate to use. These are indicators that should be taken with a grain of salt individually, but comparing the results across many different models for the same cryptocurrency can help us determine which models work best for the problem, and then comparing those results across many cryptocurrencies can help us understand which cryptocurrencies we can predict with the most accuracy. Before we can draw these comparisons however, we will need to standardize the values to create a fair comparison across all dataasets. 8.2 Data Prep - Adjust Prices Because cryptocurrencies can vary dramatically in their prices with some trading in the tens of thousands of dollars and others trading for less than a cent, we need to make sure to standardize the RMSE columns to provide a fair comparison for the metric. Therefore, before using the postResample() function, lets convert both the predictions and the target to be the % change in price over the 24 hour period, rather than the change in price ($). This step is particularly tedious, but it is important. As with the rest of this tutorial, try to understand what we are doing and why even if you find the code overwhelming. All we are doing in this Adjust Prices section is we are adjusting all of the prices to be represented as percentage change between observations, which will allow us to draw a fair comparison of the metrics across all cryptocurrencies, which would not be possible using the prices themselves. If you want to skip the tedious steps and want to see the performance of the models visualized, click here to skip ahead. 8.2.1 Add Last Price In order to convert the first prediction made to be a percentage, we need to know the previous price, which would be the last observation from the train data. Therefore, lets make a function to add the last_price_train column and append it to the predictions made so we can calculate the % change of the first element relative to the last observation in the train data, before later removing the value not associated with the predictions: last_train_price &lt;- function(train_data, predictions){ c(tail(train_data$price_usd,1), predictions) } We will first perform all steps on the linear regression models to make the code a little more digestible, and we will then perform the same steps for the rest of the models. 8.2.1.1 Test Overwrite the old predictions for the first 4 splits of the test data using the new function created above: cryptodata_nested &lt;- mutate(cryptodata_nested, lm_test_predictions = ifelse(split &lt; 5, map2(train_data, lm_test_predictions, last_train_price), NA)) The mutate() function is used to create the new column lm_test_predictions assigning the value only for the first 4 splits where the test data would actually exist (the 5th being the holdout set) using the ifelse() function. 8.2.1.2 Holdout Do the same but for the holdout now. For the holdout we need to take the last price point of the 5th split: cryptodata_nested_holdout &lt;- mutate(filter(cryptodata_nested, split == 5), lm_holdout_predictions = map2(train_data, lm_holdout_predictions, last_train_price)) Now join the holdout data to all rows based on the cryptocurrency symbol alone: cryptodata_nested &lt;- left_join(cryptodata_nested, select(cryptodata_nested_holdout, symbol, lm_holdout_predictions), by=&#39;symbol&#39;) # Remove unwanted columns cryptodata_nested &lt;- select(cryptodata_nested, -lm_holdout_predictions.x, -split.y) # Rename the columns kept cryptodata_nested &lt;- rename(cryptodata_nested, lm_holdout_predictions = &#39;lm_holdout_predictions.y&#39;, split = &#39;split.x&#39;) # Reset the correct grouping structure cryptodata_nested &lt;- group_by(cryptodata_nested, symbol, split) 8.2.2 Convert to Percentage Change Now we have everything we need to accurately calculate the percentage change between observations including the first one. Lets make a new function to calculate the percentage change: standardize_perc_change &lt;- function(predictions){ results &lt;- (diff(c(lag(predictions, 1), predictions)) / lag(predictions, 1))*100 # Exclude the first element, next element will be % change of first prediction tail(head(results, length(predictions)), length(predictions)-1) } Overwrite the old predictions with the new predictions adjusted as a percentage now: cryptodata_nested &lt;- mutate(cryptodata_nested, lm_test_predictions = ifelse(split &lt; 5, map(lm_test_predictions, standardize_perc_change), NA), # Holdout for all splits lm_holdout_predictions = map(lm_holdout_predictions, standardize_perc_change)) 8.2.3 Actuals Now do the same thing to the actual prices. Lets make a new column called actuals containing the real price values (rather than the predicted ones): actuals_create &lt;- function(train_data, test_data){ c(tail(train_data$price_usd,1), as.numeric(unlist(select(test_data, price_usd)))) } Use the new function to create the new column actuals: cryptodata_nested &lt;- mutate(cryptodata_nested, actuals_test = ifelse(split &lt; 5, map2(train_data, test_data, actuals_create), NA)) 8.2.3.1 Holdout Again, for the holdout we need the price from the training data of the 5th split to perform the first calculation: cryptodata_nested_holdout &lt;- mutate(filter(cryptodata_nested, split == 5), actuals_holdout = map2(train_data, holdout_data, actuals_create)) Join the holdout data to all rows based on the cryptocurrency symbol alone: cryptodata_nested &lt;- left_join(cryptodata_nested, select(cryptodata_nested_holdout, symbol, actuals_holdout), by=&#39;symbol&#39;) # Remove unwanted columns cryptodata_nested &lt;- select(cryptodata_nested, -split.y) # Rename the columns kept cryptodata_nested &lt;- rename(cryptodata_nested, split = &#39;split.x&#39;) # Reset the correct grouping structure cryptodata_nested &lt;- group_by(cryptodata_nested, symbol, split) 8.2.4 Actuals as % Change Now we can convert the new actuals to express the price_usd as a % change relative to the previous value using adapting the function from earlier: actuals_perc_change &lt;- function(predictions){ results &lt;- (diff(c(lag(predictions, 1), predictions)) / lag(predictions, 1))*100 # Exclude the first element, next element will be % change of first prediction tail(head(results, length(predictions)), length(predictions)-1) } cryptodata_nested &lt;- mutate(cryptodata_nested, actuals_test = ifelse(split &lt; 5, map(actuals_test, actuals_perc_change), NA), actuals_holdout = map(actuals_holdout, actuals_perc_change)) 8.3 Review Summary Statistics Now that we standardized the price to show the percentage change relative to the previous period instead of the price in dollars, we can actually compare the summary statistics across all cryptocurrencies and have it be a fair comparison. Lets get the same statistic as we did at the beginning of this section, but this time on the standardized values. This time to calculate the RMSE error metric lets use the rmse() function from the hydroGOF package because it allows us to set the na.rm = T parameter, and otherwise one NA value would return NA for the overall RMSE: hydroGOF::rmse(cryptodata_nested$lm_test_predictions[[1]], cryptodata_nested$actuals_test[[1]], na.rm=T) ## [1] 0.9332012 8.3.1 Calculate R^2 Now we can do the same for the R Squared metric using the same postResample() function that we used at the start of this section: evaluate_preds_rsq &lt;- function(predictions, actuals){ postResample(pred = predictions, obs = actuals)[[2]] } cryptodata_nested &lt;- mutate(cryptodata_nested, lm_rsq_test = unlist(ifelse(split &lt; 5, map2(lm_test_predictions, actuals_test, evaluate_preds_rsq), NA)), lm_rsq_holdout = unlist(map2(lm_holdout_predictions, actuals_holdout, evaluate_preds_rsq))) Look at the results: select(cryptodata_nested, lm_rsq_test, lm_rsq_holdout) ## # A tibble: 480 x 4 ## # Groups: symbol, split [480] ## symbol split lm_rsq_test lm_rsq_holdout ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 BTC 1 0.206 0.315 ## 2 ETH 1 0.286 0.640 ## 3 EOS 1 0.606 0.225 ## 4 LTC 1 0.634 0.389 ## 5 BSV 1 0.105 0.422 ## 6 ADA 1 0.196 0.144 ## 7 ZEC 1 0.731 0.00185 ## 8 TRX 1 0.0840 0.326 ## 9 HT 1 0.000497 0.0144 ## 10 XMR 1 0.217 0.227 ## # ... with 470 more rows 8.3.2 Calculate RMSE Similarly lets make a function to get the RMSE metric for all models: evaluate_preds_rmse &lt;- function(predictions, actuals){ hydroGOF::rmse(predictions, actuals, na.rm=T) } Now we can use the map2() function to use it to get the RMSE metric for both the test data and the holdout: cryptodata_nested &lt;- mutate(cryptodata_nested, lm_rmse_test = unlist(ifelse(split &lt; 5, map2(lm_test_predictions, actuals_test, evaluate_preds_rmse), NA)), lm_rmse_holdout = unlist(map2(lm_holdout_predictions, actuals_holdout, evaluate_preds_rmse))) Look at the results. Wrapping them in print(n=500) overwrites the behavior to only give a preview of the data so we can view the full results (up to 500 observations). print(select(cryptodata_nested, lm_rmse_test, lm_rmse_holdout, lm_rsq_test, lm_rsq_holdout), n=500) ## # A tibble: 480 x 6 ## # Groups: symbol, split [480] ## symbol split lm_rmse_test lm_rmse_holdout lm_rsq_test lm_rsq_holdout ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 BTC 1 0.933 0.858 0.206 0.315 ## 2 ETH 1 1.05 0.962 0.286 0.640 ## 3 EOS 1 1.02 1.04 0.606 0.225 ## 4 LTC 1 0.668 0.797 0.634 0.389 ## 5 BSV 1 0.982 0.535 0.105 0.422 ## 6 ADA 1 1.21 0.812 0.196 0.144 ## 7 ZEC 1 0.740 1.34 0.731 0.00185 ## 8 TRX 1 0.612 0.515 0.0840 0.326 ## 9 HT 1 0.613 0.987 0.000497 0.0144 ## 10 XMR 1 0.913 0.912 0.217 0.227 ## 11 KNC 1 0.745 0.598 0.821 0.800 ## 12 ZRX 1 0.879 0.753 0.630 0.301 ## 13 BAT 1 0.647 1.19 0.854 0.0569 ## 14 BNT 1 50.3 1.76 0.314 0.0563 ## 15 MANA 1 0.933 1.43 0.662 0.105 ## 16 ENJ 1 1.75 1.02 0.296 0.165 ## 17 XEM 1 2.08 0.822 0.130 0.191 ## 18 ARDR 1 16.1 1.33 0.369 0.101 ## 19 BTG 1 2.43 0.717 0.378 0.632 ## 20 KMD 1 2.96 1.39 0.188 0.382 ## 21 NEXO 1 4.48 0.610 0.286 0.611 ## 22 CHZ 1 0.894 1.14 0.840 0.402 ## 23 BRD 1 15.2 8.83 0.000438 0.569 ## 24 DCR 1 0.881 1.51 0.0639 0.0760 ## 25 VIB 1 24.1 12.5 0.00101 0.725 ## 26 WAXP 1 0.835 1.20 0.000373 0.0909 ## 27 LEO 1 12.6 4.43 0.0367 0.620 ## 28 AVA 1 1.35 1.89 0.111 0.0414 ## 29 GMTT 1 0.528 1.75 0.326 0.459 ## 30 CROOLD 1 1.04 1.77 0.154 0.0403 ## 31 GAS 1 0.567 2.89 0.873 0.495 ## 32 LEVL 1 14.3 2.10 0.518 0.950 ## 33 DODO 1 1.06 9.67 0.598 0.0517 ## 34 DYDX 1 1.47 2.62 0.504 0.0823 ## 35 1INCH 1 0.658 0.835 0.833 0.439 ## 36 BAKE 1 1.02 1.15 0.725 0.104 ## 37 DOT 1 1.25 0.954 0.159 0.00458 ## 38 SKL 1 1.39 3.26 0.329 0.379 ## 39 PLC 1 5.28 4.47 0.119 0.475 ## 40 LINA 1 0.873 1.01 0.672 0.0677 ## 41 INJ 1 7.49 2.58 0.251 0.228 ## 42 SPI 1 32.1 15.2 0.0226 0.0344 ## 43 TOMO 1 4.68 0.984 0.305 0.232 ## 44 QTUM 1 1.20 1.04 0.209 0.0445 ## 45 ATA 1 1.22 1.42 0.360 0.508 ## 46 IOTA 1 0.621 1.26 0.759 0.0143 ## 47 TORN 1 2.07 8.15 0.0532 0.383 ## 48 IOST 1 0.856 0.698 0.655 0.125 ## 49 NEAR 1 0.872 0.780 0.683 0.524 ## 50 LSK 1 1.17 1.03 0.177 0.0222 ## 51 PERP 1 1.12 1.57 0.735 0.0449 ## 52 STETH 1 1.71 20.9 0.998 0.00120 ## 53 RIF 1 1.25 1.43 0.780 0.399 ## 54 UMA 1 0.987 15.2 0.543 0.190 ## 55 ATOM 1 0.858 0.947 0.709 0.848 ## 56 ALICE 1 1.18 0.719 0.413 0.253 ## 57 MTLX 1 1.29 0.648 0.320 0.0729 ## 58 PLI 1 1.05 0.875 0.780 0.560 ## 59 XDC 1 1.04 0.196 0.351 0.722 ## 60 MC 1 9.08 17.4 0.221 0.154 ## 61 ETC 1 3.33 2.00 0.663 0.00573 ## 62 BDX 1 0.701 0.492 0.140 0.0669 ## 63 SNX 1 1.82 1.93 0.273 0.0525 ## 64 TRIBE 1 0.820 7.20 0.0348 0.443 ## 65 USG 1 0.0106 0.575 0.519 0.00392 ## 66 THETA 1 1.04 1.22 0.497 0.102 ## 67 RUNE 1 1.21 1.81 0.450 0.00436 ## 68 KLAY 1 1.07 1.04 0.128 0.0208 ## 69 BAL 1 1.30 3.02 0.242 0.258 ## 70 XCH 1 0.347 0.709 0.926 0.266 ## 71 REN 1 1.02 1.06 0.617 0.134 ## 72 ALCX 1 1.33 1.85 0.0698 0.00531 ## 73 VGX 1 17.4 2.37 0.0265 0.975 ## 74 SAND 1 0.997 1.49 0.537 0.0358 ## 75 ANKR 1 2.04 1.07 0.221 0.203 ## 76 BCH 1 1.73 0.413 0.00179 0.758 ## 77 FTT 1 0.971 1.11 0.101 0.0756 ## 78 CRPT 1 13.2 13.5 0.0359 0.269 ## 79 MIR 1 4.27 3.29 0.717 0.321 ## 80 GMT 1 0.728 1.47 0.813 0.570 ## 81 T 1 3.08 2.68 0.246 0.0280 ## 82 DASH 1 0.789 1.21 0.560 0.0573 ## 83 SXP 1 0.879 1.37 0.459 0.000250 ## 84 SFP 1 1.21 2.27 0.274 0.000960 ## 85 BICO 1 1.69 1.38 0.0677 0.0115 ## 86 EURS 1 0.0930 0.190 0.737 0.256 ## 87 NMR 1 12.3 0.960 0.00660 0.377 ## 88 CELR 1 0.909 15.0 0.778 0.546 ## 89 ICP 1 1.45 0.738 0.395 0.466 ## 90 OAX 1 8.13 5.82 0.424 0.245 ## 91 RLY 1 1.90 4.30 0.185 0.729 ## 92 ABBC 1 54.5 2.18 0.507 0.0000421 ## 93 CBC 1 139. 4.52 0.0805 0.705 ## 94 XCN 1 3.91 NaN 0.999 NA ## 95 COCOS 1 0.874 3.34 0.111 0.767 ## 96 FIDA 1 9.38 4.26 0.566 0.000129 ## 97 STETH 2 18.9 20.9 0.00405 0.00120 ## 98 LEVL 2 9.65 2.10 0.0309 0.950 ## 99 T 2 5.62 2.68 0.384 0.0280 ## 100 GAS 2 1.75 2.89 0.00447 0.495 ## 101 USG 2 2.88 0.575 0.268 0.00392 ## 102 INJ 2 1.81 2.58 0.0961 0.228 ## 103 KMD 2 1.24 1.39 0.0000313 0.382 ## 104 ALCX 2 10.9 1.85 0.804 0.00531 ## 105 BRD 2 1.76 8.83 0.980 0.569 ## 106 GMTT 2 0.983 1.75 0.882 0.459 ## 107 RLY 2 0.826 4.30 0.279 0.729 ## 108 VIB 2 9.25 12.5 0.137 0.725 ## 109 DCR 2 0.451 1.51 0.535 0.0760 ## 110 VGX 2 4.62 2.37 0.334 0.975 ## 111 LSK 2 1.35 1.03 0.0215 0.0222 ## 112 DASH 2 0.467 1.21 0.874 0.0573 ## 113 CELR 2 0.773 15.0 0.799 0.546 ## 114 PLI 2 3.42 0.875 0.00649 0.560 ## 115 MC 2 11.6 17.4 0.0308 0.154 ## 116 XCH 2 0.563 0.709 0.114 0.266 ## 117 MIR 2 1.08 3.29 0.108 0.321 ## 118 BTC 2 0.301 0.858 0.807 0.315 ## 119 ETH 2 0.444 0.962 0.818 0.640 ## 120 LTC 2 0.414 0.797 0.775 0.389 ## 121 BSV 2 0.768 0.535 0.501 0.422 ## 122 ADA 2 0.341 0.812 0.734 0.144 ## 123 ZEC 2 0.647 1.34 0.741 0.00185 ## 124 TRX 2 0.251 0.515 0.716 0.326 ## 125 HT 2 18.0 0.987 0.0100 0.0144 ## 126 XMR 2 0.360 0.912 0.749 0.227 ## 127 KNC 2 0.583 0.598 0.719 0.800 ## 128 ZRX 2 1.18 0.753 0.256 0.301 ## 129 BAT 2 0.582 1.19 0.730 0.0569 ## 130 BNT 2 0.366 1.76 0.854 0.0563 ## 131 MANA 2 0.603 1.43 0.751 0.105 ## 132 ENJ 2 0.921 1.02 0.798 0.165 ## 133 XEM 2 0.624 0.822 0.636 0.191 ## 134 BTG 2 2.03 0.717 0.108 0.632 ## 135 ARDR 2 1.54 1.33 0.0682 0.101 ## 136 NEXO 2 0.652 0.610 0.419 0.611 ## 137 CHZ 2 0.678 1.14 0.739 0.402 ## 138 LEO 2 0.518 4.43 0.728 0.620 ## 139 AVA 2 9.26 1.89 0.00365 0.0414 ## 140 CROOLD 2 0.725 1.77 0.855 0.0403 ## 141 DODO 2 0.473 9.67 0.863 0.0517 ## 142 DYDX 2 1.00 2.62 0.410 0.0823 ## 143 1INCH 2 0.603 0.835 0.867 0.439 ## 144 BAKE 2 0.604 1.15 0.731 0.104 ## 145 SKL 2 0.957 3.26 0.688 0.379 ## 146 LINA 2 0.726 1.01 0.779 0.0677 ## 147 TOMO 2 1.00 0.984 0.738 0.232 ## 148 QTUM 2 1.08 1.04 0.422 0.0445 ## 149 ATA 2 2.09 1.42 0.970 0.508 ## 150 IOTA 2 0.508 1.26 0.746 0.0143 ## 151 TORN 2 1.63 8.15 0.655 0.383 ## 152 IOST 2 0.447 0.698 0.714 0.125 ## 153 NEAR 2 0.874 0.780 0.844 0.524 ## 154 PERP 2 1.61 1.57 0.865 0.0449 ## 155 RIF 2 2.04 1.43 0.0210 0.399 ## 156 ATOM 2 0.808 0.947 0.561 0.848 ## 157 ALICE 2 0.662 0.719 0.673 0.253 ## 158 MTLX 2 3.11 0.648 0.745 0.0729 ## 159 XDC 2 0.991 0.196 0.446 0.722 ## 160 BDX 2 0.238 0.492 0.942 0.0669 ## 161 TRIBE 2 73.8 7.20 0.000000292 0.443 ## 162 SNX 2 0.767 1.93 0.807 0.0525 ## 163 THETA 2 0.909 1.22 0.860 0.102 ## 164 KLAY 2 0.715 1.04 0.604 0.0208 ## 165 BAL 2 22.4 3.02 0.0824 0.258 ## 166 DOT 2 0.619 0.954 0.771 0.00458 ## 167 RUNE 2 0.703 1.81 0.736 0.00436 ## 168 REN 2 2.79 1.06 0.0345 0.134 ## 169 SAND 2 0.509 1.49 0.822 0.0358 ## 170 ANKR 2 0.466 1.07 0.887 0.203 ## 171 BCH 2 0.679 0.413 0.798 0.758 ## 172 FTT 2 0.908 1.11 0.261 0.0756 ## 173 GMT 2 22.6 1.47 0.00101 0.570 ## 174 SXP 2 0.477 1.37 0.837 0.000250 ## 175 SFP 2 7.11 2.27 0.364 0.000960 ## 176 BICO 2 0.846 1.38 0.710 0.0115 ## 177 EURS 2 0.123 0.190 0.143 0.256 ## 178 NMR 2 2.50 0.960 0.0000255 0.377 ## 179 ICP 2 1.06 0.738 0.346 0.466 ## 180 EOS 2 0.492 1.04 0.865 0.225 ## 181 UMA 2 19.2 15.2 0.00432 0.190 ## 182 CRPT 2 1.97 13.5 0.00743 0.269 ## 183 WAXP 2 0.720 1.20 0.519 0.0909 ## 184 OAX 2 7.85 5.82 0.230 0.245 ## 185 PLC 2 6.17 4.47 0.219 0.475 ## 186 ABBC 2 NaN 2.18 NA 0.0000421 ## 187 ETC 2 3.10 2.00 0.000364 0.00573 ## 188 XCN 2 23.5 NaN 0.355 NA ## 189 CBC 2 7.73 4.52 0.228 0.705 ## 190 FIDA 2 3.97 4.26 0.747 0.000129 ## 191 STETH 3 2.24 20.9 0.490 0.00120 ## 192 SPI 2 3.88 15.2 0.202 0.0344 ## 193 LEVL 3 2.41 2.10 0.0989 0.950 ## 194 INJ 3 12.5 2.58 0.0113 0.228 ## 195 GAS 3 0.893 2.89 0.424 0.495 ## 196 KMD 3 1.66 1.39 0.374 0.382 ## 197 BRD 3 7.53 8.83 0.220 0.569 ## 198 GMTT 3 1.54 1.75 0.139 0.459 ## 199 CRPT 3 0.730 13.5 0.848 0.269 ## 200 VGX 3 6.53 2.37 0.500 0.975 ## 201 T 3 3.67 2.68 0.482 0.0280 ## 202 LSK 3 1.48 1.03 0.882 0.0222 ## 203 CELR 3 1.31 15.0 0.967 0.546 ## 204 PLI 3 2.87 0.875 0.874 0.560 ## 205 MC 3 2.49 17.4 0.535 0.154 ## 206 MIR 3 0.519 3.29 0.987 0.321 ## 207 XCH 3 0.788 0.709 0.529 0.266 ## 208 BTC 3 0.929 0.858 0.681 0.315 ## 209 ETH 3 0.831 0.962 0.699 0.640 ## 210 LTC 3 1.47 0.797 0.256 0.389 ## 211 BSV 3 2.20 0.535 0.0685 0.422 ## 212 ADA 3 1.34 0.812 0.783 0.144 ## 213 ZEC 3 1.50 1.34 0.912 0.00185 ## 214 HT 3 0.678 0.987 0.926 0.0144 ## 215 TRX 3 1.21 0.515 0.0766 0.326 ## 216 KNC 3 0.751 0.598 0.828 0.800 ## 217 XMR 3 2.25 0.912 0.126 0.227 ## 218 ZRX 3 1.25 0.753 0.798 0.301 ## 219 BAT 3 0.846 1.19 0.917 0.0569 ## 220 BNT 3 1.35 1.76 0.628 0.0563 ## 221 MANA 3 3.09 1.43 0.129 0.105 ## 222 ENJ 3 2.42 1.02 0.00543 0.165 ## 223 XEM 3 1.30 0.822 0.721 0.191 ## 224 BTG 3 0.918 0.717 0.938 0.632 ## 225 ARDR 3 2.24 1.33 0.813 0.101 ## 226 NEXO 3 1.27 0.610 0.735 0.611 ## 227 CHZ 3 2.49 1.14 0.00201 0.402 ## 228 LEO 3 1.18 4.43 0.0414 0.620 ## 229 AVA 3 2.00 1.89 0.0761 0.0414 ## 230 CROOLD 3 1.71 1.77 0.750 0.0403 ## 231 DODO 3 2.16 9.67 0.815 0.0517 ## 232 DYDX 3 1.14 2.62 0.868 0.0823 ## 233 1INCH 3 1.62 0.835 0.716 0.439 ## 234 BAKE 3 1.92 1.15 0.732 0.104 ## 235 SKL 3 1.82 3.26 0.741 0.379 ## 236 LINA 3 2.39 1.01 0.392 0.0677 ## 237 TOMO 3 3.07 0.984 0.0685 0.232 ## 238 QTUM 3 2.23 1.04 0.140 0.0445 ## 239 IOTA 3 1.83 1.26 0.465 0.0143 ## 240 TORN 3 0.885 8.15 0.956 0.383 ## 241 IOST 3 1.38 0.698 0.798 0.125 ## 242 NEAR 3 1.19 0.780 0.818 0.524 ## 243 PERP 3 1.30 1.57 0.862 0.0449 ## 244 RIF 3 6.55 1.43 0.0673 0.399 ## 245 ATOM 3 1.25 0.947 0.135 0.848 ## 246 ALICE 3 2.68 0.719 0.498 0.253 ## 247 MTLX 3 4.85 0.648 0.0138 0.0729 ## 248 XDC 3 0.333 0.196 0.896 0.722 ## 249 BDX 3 0.882 0.492 0.748 0.0669 ## 250 TRIBE 3 1.34 7.20 0.156 0.443 ## 251 BAL 3 1.13 3.02 0.945 0.258 ## 252 DOT 3 1.53 0.954 0.676 0.00458 ## 253 ATA 3 5.47 1.42 0.511 0.508 ## 254 SNX 3 2.34 1.93 0.788 0.0525 ## 255 THETA 3 2.08 1.22 0.348 0.102 ## 256 KLAY 3 2.23 1.04 0.616 0.0208 ## 257 REN 3 1.80 1.06 0.854 0.134 ## 258 FTT 3 2.32 1.11 0.397 0.0756 ## 259 GMT 3 2.93 1.47 0.796 0.570 ## 260 SFP 3 7.03 2.27 0.0559 0.000960 ## 261 BICO 3 1.11 1.38 0.910 0.0115 ## 262 NMR 3 1.22 0.960 0.891 0.377 ## 263 ICP 3 2.20 0.738 0.410 0.466 ## 264 EOS 3 3.69 1.04 0.249 0.225 ## 265 RUNE 3 2.64 1.81 0.223 0.00436 ## 266 SAND 3 2.69 1.49 0.000441 0.0358 ## 267 ANKR 3 1.71 1.07 0.843 0.203 ## 268 BCH 3 2.59 0.413 0.0385 0.758 ## 269 SXP 3 1.43 1.37 0.974 0.000250 ## 270 EURS 3 0.147 0.190 0.483 0.256 ## 271 UMA 3 1.40 15.2 0.888 0.190 ## 272 VIB 3 6.32 12.5 0.00130 0.725 ## 273 DASH 3 2.51 1.21 0.291 0.0573 ## 274 DCR 3 1.48 1.51 0.888 0.0760 ## 275 WAXP 3 0.425 1.20 0.981 0.0909 ## 276 OAX 3 11.3 5.82 0.112 0.245 ## 277 RLY 3 9.58 4.30 0.465 0.729 ## 278 COCOS 2 4.54 3.34 0.000173 0.767 ## 279 USG 3 5.66 0.575 0.00748 0.00392 ## 280 ALCX 3 2.05 1.85 0.0449 0.00531 ## 281 CBC 3 1.40 4.52 0.317 0.705 ## 282 PLC 3 2.64 4.47 0.0800 0.475 ## 283 ETC 3 1.70 2.00 0.0133 0.00573 ## 284 FIDA 3 0.989 4.26 0.295 0.000129 ## 285 XCN 3 15.7 NaN 0.423 NA ## 286 ABBC 3 5.57 2.18 0.000608 0.0000421 ## 287 STETH 4 3.16 20.9 0.00238 0.00120 ## 288 SPI 3 12.5 15.2 0.00485 0.0344 ## 289 LEVL 4 17.2 2.10 0.0571 0.950 ## 290 COCOS 3 0.530 3.34 0.580 0.767 ## 291 BRD 4 8.74 8.83 0.413 0.569 ## 292 GMTT 4 0.332 1.75 0.195 0.459 ## 293 CELR 4 0.814 15.0 0.291 0.546 ## 294 VGX 4 3.88 2.37 0.0860 0.975 ## 295 T 4 0.582 2.68 0.111 0.0280 ## 296 MIR 4 1.31 3.29 0.622 0.321 ## 297 MC 4 10.1 17.4 0.377 0.154 ## 298 XCH 4 0.485 0.709 0.407 0.266 ## 299 BTC 4 0.206 0.858 0.909 0.315 ## 300 ETH 4 0.467 0.962 0.739 0.640 ## 301 LTC 4 0.788 0.797 0.898 0.389 ## 302 BSV 4 0.464 0.535 0.488 0.422 ## 303 ADA 4 0.568 0.812 0.373 0.144 ## 304 ZEC 4 0.645 1.34 0.262 0.00185 ## 305 HT 4 1.27 0.987 0.000584 0.0144 ## 306 KNC 4 0.421 0.598 0.740 0.800 ## 307 ZRX 4 0.618 0.753 0.485 0.301 ## 308 BAT 4 0.403 1.19 0.680 0.0569 ## 309 BNT 4 0.661 1.76 0.743 0.0563 ## 310 MANA 4 0.502 1.43 0.317 0.105 ## 311 ENJ 4 0.401 1.02 0.749 0.165 ## 312 XEM 4 0.879 0.822 0.0653 0.191 ## 313 BTG 4 0.373 0.717 0.479 0.632 ## 314 ARDR 4 0.350 1.33 0.731 0.101 ## 315 NEXO 4 0.612 0.610 0.850 0.611 ## 316 CHZ 4 0.820 1.14 0.740 0.402 ## 317 LEO 4 0.361 4.43 0.740 0.620 ## 318 AVA 4 0.726 1.89 0.604 0.0414 ## 319 CROOLD 4 0.544 1.77 0.296 0.0403 ## 320 DODO 4 0.887 9.67 0.394 0.0517 ## 321 DYDX 4 0.698 2.62 0.323 0.0823 ## 322 1INCH 4 0.733 0.835 0.771 0.439 ## 323 BAKE 4 0.614 1.15 0.354 0.104 ## 324 SKL 4 0.609 3.26 0.324 0.379 ## 325 LINA 4 0.597 1.01 0.413 0.0677 ## 326 QTUM 4 0.460 1.04 0.656 0.0445 ## 327 TOMO 4 0.922 0.984 0.0648 0.232 ## 328 IOTA 4 0.602 1.26 0.403 0.0143 ## 329 TORN 4 1.82 8.15 0.0632 0.383 ## 330 IOST 4 0.686 0.698 0.000822 0.125 ## 331 NEAR 4 0.608 0.780 0.486 0.524 ## 332 PERP 4 0.801 1.57 0.453 0.0449 ## 333 RIF 4 0.312 1.43 0.892 0.399 ## 334 ATOM 4 0.959 0.947 0.475 0.848 ## 335 ALICE 4 0.573 0.719 0.445 0.253 ## 336 MTLX 4 1.51 0.648 0.627 0.0729 ## 337 XDC 4 0.405 0.196 0.670 0.722 ## 338 BDX 4 0.381 0.492 0.878 0.0669 ## 339 TRIBE 4 8.82 7.20 0.409 0.443 ## 340 BAL 4 3.36 3.02 0.117 0.258 ## 341 TRX 4 0.249 0.515 0.869 0.326 ## 342 DOT 4 0.448 0.954 0.759 0.00458 ## 343 ATA 4 4.87 1.42 0.0881 0.508 ## 344 SNX 4 1.39 1.93 0.00135 0.0525 ## 345 THETA 4 0.632 1.22 0.406 0.102 ## 346 KLAY 4 0.283 1.04 0.810 0.0208 ## 347 REN 4 0.770 1.06 0.520 0.134 ## 348 FTT 4 0.485 1.11 0.497 0.0756 ## 349 GMT 4 0.467 1.47 0.811 0.570 ## 350 SFP 4 3.09 2.27 0.0231 0.000960 ## 351 BICO 4 1.91 1.38 0.327 0.0115 ## 352 NMR 4 0.732 0.960 0.235 0.377 ## 353 ICP 4 0.910 0.738 0.00102 0.466 ## 354 EOS 4 1.18 1.04 0.576 0.225 ## 355 VIB 4 1.01 12.5 0.897 0.725 ## 356 PLI 4 1.24 0.875 0.236 0.560 ## 357 RUNE 4 0.534 1.81 0.637 0.00436 ## 358 SAND 4 0.518 1.49 0.713 0.0358 ## 359 BCH 4 0.842 0.413 0.319 0.758 ## 360 SXP 4 0.379 1.37 0.738 0.000250 ## 361 EURS 4 0.134 0.190 0.541 0.256 ## 362 ANKR 4 1.19 1.07 0.202 0.203 ## 363 XMR 4 0.382 0.912 0.663 0.227 ## 364 UMA 4 19.6 15.2 0.0493 0.190 ## 365 WAXP 4 0.522 1.20 0.717 0.0909 ## 366 LSK 4 0.418 1.03 0.679 0.0222 ## 367 DASH 4 0.572 1.21 0.359 0.0573 ## 368 DCR 4 1.86 1.51 0.419 0.0760 ## 369 CRPT 4 6.22 13.5 0.476 0.269 ## 370 OAX 4 15.7 5.82 0.00383 0.245 ## 371 XCN 4 31.9 NaN 0.0405 NA ## 372 KMD 4 1.24 1.39 0.259 0.382 ## 373 RLY 4 4.16 4.30 0.240 0.729 ## 374 INJ 4 9.74 2.58 0.212 0.228 ## 375 USG 4 6.97 0.575 0.0333 0.00392 ## 376 CBC 4 6.66 4.52 0.692 0.705 ## 377 ALCX 4 0.441 1.85 0.781 0.00531 ## 378 PLC 4 2.80 4.47 0.478 0.475 ## 379 ETC 4 0.766 2.00 0.194 0.00573 ## 380 FIDA 4 0.425 4.26 0.625 0.000129 ## 381 ABBC 4 4.54 2.18 0.282 0.0000421 ## 382 GAS 4 0.947 2.89 0.0267 0.495 ## 383 STETH 5 NA 20.9 NA 0.00120 ## 384 SPI 4 12.8 15.2 0.0217 0.0344 ## 385 COCOS 4 3.45 3.34 0.291 0.767 ## 386 LEVL 5 NA 2.10 NA 0.950 ## 387 XCN 5 NA NaN NA NA ## 388 BRD 5 NA 8.83 NA 0.569 ## 389 CELR 5 NA 15.0 NA 0.546 ## 390 MIR 5 NA 3.29 NA 0.321 ## 391 GMTT 5 NA 1.75 NA 0.459 ## 392 MC 5 NA 17.4 NA 0.154 ## 393 DASH 5 NA 1.21 NA 0.0573 ## 394 BTC 5 NA 0.858 NA 0.315 ## 395 ETH 5 NA 0.962 NA 0.640 ## 396 LTC 5 NA 0.797 NA 0.389 ## 397 ADA 5 NA 0.812 NA 0.144 ## 398 BSV 5 NA 0.535 NA 0.422 ## 399 ZEC 5 NA 1.34 NA 0.00185 ## 400 HT 5 NA 0.987 NA 0.0144 ## 401 KNC 5 NA 0.598 NA 0.800 ## 402 ZRX 5 NA 0.753 NA 0.301 ## 403 BAT 5 NA 1.19 NA 0.0569 ## 404 BNT 5 NA 1.76 NA 0.0563 ## 405 MANA 5 NA 1.43 NA 0.105 ## 406 ENJ 5 NA 1.02 NA 0.165 ## 407 XEM 5 NA 0.822 NA 0.191 ## 408 BTG 5 NA 0.717 NA 0.632 ## 409 ARDR 5 NA 1.33 NA 0.101 ## 410 NEXO 5 NA 0.610 NA 0.611 ## 411 CHZ 5 NA 1.14 NA 0.402 ## 412 LEO 5 NA 4.43 NA 0.620 ## 413 AVA 5 NA 1.89 NA 0.0414 ## 414 CROOLD 5 NA 1.77 NA 0.0403 ## 415 DODO 5 NA 9.67 NA 0.0517 ## 416 DYDX 5 NA 2.62 NA 0.0823 ## 417 1INCH 5 NA 0.835 NA 0.439 ## 418 BAKE 5 NA 1.15 NA 0.104 ## 419 SKL 5 NA 3.26 NA 0.379 ## 420 PLC 5 NA 4.47 NA 0.475 ## 421 LINA 5 NA 1.01 NA 0.0677 ## 422 QTUM 5 NA 1.04 NA 0.0445 ## 423 TOMO 5 NA 0.984 NA 0.232 ## 424 IOTA 5 NA 1.26 NA 0.0143 ## 425 TORN 5 NA 8.15 NA 0.383 ## 426 IOST 5 NA 0.698 NA 0.125 ## 427 NEAR 5 NA 0.780 NA 0.524 ## 428 PERP 5 NA 1.57 NA 0.0449 ## 429 RIF 5 NA 1.43 NA 0.399 ## 430 ATOM 5 NA 0.947 NA 0.848 ## 431 ALICE 5 NA 0.719 NA 0.253 ## 432 MTLX 5 NA 0.648 NA 0.0729 ## 433 XDC 5 NA 0.196 NA 0.722 ## 434 BDX 5 NA 0.492 NA 0.0669 ## 435 TRIBE 5 NA 7.20 NA 0.443 ## 436 BAL 5 NA 3.02 NA 0.258 ## 437 TRX 5 NA 0.515 NA 0.326 ## 438 DOT 5 NA 0.954 NA 0.00458 ## 439 ATA 5 NA 1.42 NA 0.508 ## 440 PLI 5 NA 0.875 NA 0.560 ## 441 SNX 5 NA 1.93 NA 0.0525 ## 442 THETA 5 NA 1.22 NA 0.102 ## 443 REN 5 NA 1.06 NA 0.134 ## 444 FTT 5 NA 1.11 NA 0.0756 ## 445 GMT 5 NA 1.47 NA 0.570 ## 446 SFP 5 NA 2.27 NA 0.000960 ## 447 BICO 5 NA 1.38 NA 0.0115 ## 448 NMR 5 NA 0.960 NA 0.377 ## 449 EOS 5 NA 1.04 NA 0.225 ## 450 LSK 5 NA 1.03 NA 0.0222 ## 451 RUNE 5 NA 1.81 NA 0.00436 ## 452 SAND 5 NA 1.49 NA 0.0358 ## 453 BCH 5 NA 0.413 NA 0.758 ## 454 SXP 5 NA 1.37 NA 0.000250 ## 455 EURS 5 NA 0.190 NA 0.256 ## 456 ICP 5 NA 0.738 NA 0.466 ## 457 DCR 5 NA 1.51 NA 0.0760 ## 458 WAXP 5 NA 1.20 NA 0.0909 ## 459 ANKR 5 NA 1.07 NA 0.203 ## 460 XMR 5 NA 0.912 NA 0.227 ## 461 UMA 5 NA 15.2 NA 0.190 ## 462 KLAY 5 NA 1.04 NA 0.0208 ## 463 XCH 5 NA 0.709 NA 0.266 ## 464 CBC 5 NA 4.52 NA 0.705 ## 465 VIB 5 NA 12.5 NA 0.725 ## 466 CRPT 5 NA 13.5 NA 0.269 ## 467 OAX 5 NA 5.82 NA 0.245 ## 468 ABBC 5 NA 2.18 NA 0.0000421 ## 469 KMD 5 NA 1.39 NA 0.382 ## 470 RLY 5 NA 4.30 NA 0.729 ## 471 VGX 5 NA 2.37 NA 0.975 ## 472 USG 5 NA 0.575 NA 0.00392 ## 473 T 5 NA 2.68 NA 0.0280 ## 474 INJ 5 NA 2.58 NA 0.228 ## 475 ALCX 5 NA 1.85 NA 0.00531 ## 476 ETC 5 NA 2.00 NA 0.00573 ## 477 GAS 5 NA 2.89 NA 0.495 ## 478 FIDA 5 NA 4.26 NA 0.000129 ## 479 SPI 5 NA 15.2 NA 0.0344 ## 480 COCOS 5 NA 3.34 NA 0.767 Out of 480 groups, 171 had an equal or lower RMSE score for the holdout than the test set. 8.4 Adjust Prices - All Models Lets repeat the same steps that we outlined above for all models. 8.4.1 Add Last Price cryptodata_nested &lt;- mutate(cryptodata_nested, # XGBoost: xgb_test_predictions = ifelse(split &lt; 5, map2(train_data, xgb_test_predictions, last_train_price), NA), # Neural Network: nnet_test_predictions = ifelse(split &lt; 5, map2(train_data, nnet_test_predictions, last_train_price), NA), # Random Forest: rf_test_predictions = ifelse(split &lt; 5, map2(train_data, rf_test_predictions, last_train_price), NA), # PCR: pcr_test_predictions = ifelse(split &lt; 5, map2(train_data, pcr_test_predictions, last_train_price), NA)) 8.4.1.0.1 Holdout cryptodata_nested_holdout &lt;- mutate(filter(cryptodata_nested, split == 5), # XGBoost: xgb_holdout_predictions = map2(train_data, xgb_holdout_predictions, last_train_price), # Neural Network: nnet_holdout_predictions = map2(train_data, nnet_holdout_predictions, last_train_price), # Random Forest: rf_holdout_predictions = map2(train_data, rf_holdout_predictions, last_train_price), # PCR: pcr_holdout_predictions = map2(train_data, pcr_holdout_predictions, last_train_price)) Join the holdout data to all rows based on the cryptocurrency symbol alone: cryptodata_nested &lt;- left_join(cryptodata_nested, select(cryptodata_nested_holdout, symbol, xgb_holdout_predictions, nnet_holdout_predictions, rf_holdout_predictions, pcr_holdout_predictions), by=&#39;symbol&#39;) # Remove unwanted columns cryptodata_nested &lt;- select(cryptodata_nested, -xgb_holdout_predictions.x, -nnet_holdout_predictions.x,-rf_holdout_predictions.x, -pcr_holdout_predictions.x, -split.y) # Rename the columns kept cryptodata_nested &lt;- rename(cryptodata_nested, xgb_holdout_predictions = &#39;xgb_holdout_predictions.y&#39;, nnet_holdout_predictions = &#39;nnet_holdout_predictions.y&#39;, rf_holdout_predictions = &#39;rf_holdout_predictions.y&#39;, pcr_holdout_predictions = &#39;pcr_holdout_predictions.y&#39;, split = &#39;split.x&#39;) # Reset the correct grouping structure cryptodata_nested &lt;- group_by(cryptodata_nested, symbol, split) 8.4.2 Convert to % Change Overwrite the old predictions with the new predictions adjusted as a percentage now: cryptodata_nested &lt;- mutate(cryptodata_nested, # XGBoost: xgb_test_predictions = ifelse(split &lt; 5, map(xgb_test_predictions, standardize_perc_change), NA), # holdout - all splits xgb_holdout_predictions = map(xgb_holdout_predictions, standardize_perc_change), # nnet: nnet_test_predictions = ifelse(split &lt; 5, map(nnet_test_predictions, standardize_perc_change), NA), # holdout - all splits nnet_holdout_predictions = map(nnet_holdout_predictions, standardize_perc_change), # Random Forest: rf_test_predictions = ifelse(split &lt; 5, map(rf_test_predictions, standardize_perc_change), NA), # holdout - all splits rf_holdout_predictions = map(rf_holdout_predictions, standardize_perc_change), # PCR: pcr_test_predictions = ifelse(split &lt; 5, map(pcr_test_predictions, standardize_perc_change), NA), # holdout - all splits pcr_holdout_predictions = map(pcr_holdout_predictions, standardize_perc_change)) 8.4.3 Add Metrics Add the RMSE and \\(R^2\\) metrics: cryptodata_nested &lt;- mutate(cryptodata_nested, # XGBoost - RMSE - Test xgb_rmse_test = unlist(ifelse(split &lt; 5, map2(xgb_test_predictions, actuals_test, evaluate_preds_rmse), NA)), # And holdout: xgb_rmse_holdout = unlist(map2(xgb_holdout_predictions, actuals_holdout ,evaluate_preds_rmse)), # XGBoost - R^2 - Test xgb_rsq_test = unlist(ifelse(split &lt; 5, map2(xgb_test_predictions, actuals_test, evaluate_preds_rsq), NA)), # And holdout: xgb_rsq_holdout = unlist(map2(xgb_holdout_predictions, actuals_holdout, evaluate_preds_rsq)), # Neural Network - RMSE - Test nnet_rmse_test = unlist(ifelse(split &lt; 5, map2(nnet_test_predictions, actuals_test, evaluate_preds_rmse), NA)), # And holdout: nnet_rmse_holdout = unlist(map2(nnet_holdout_predictions, actuals_holdout, evaluate_preds_rmse)), # Neural Network - R^2 - Test nnet_rsq_test = unlist(ifelse(split &lt; 5, map2(nnet_test_predictions, actuals_test, evaluate_preds_rsq), NA)), # And holdout: nnet_rsq_holdout = unlist(map2(nnet_holdout_predictions, actuals_holdout, evaluate_preds_rsq)), # Random Forest - RMSE - Test rf_rmse_test = unlist(ifelse(split &lt; 5, map2(rf_test_predictions, actuals_test, evaluate_preds_rmse), NA)), # And holdout: rf_rmse_holdout = unlist(map2(rf_holdout_predictions, actuals_holdout, evaluate_preds_rmse)), # Random Forest - R^2 - Test rf_rsq_test = unlist(ifelse(split &lt; 5, map2(rf_test_predictions, actuals_test, evaluate_preds_rsq), NA)), # And holdout: rf_rsq_holdout = unlist(map2(rf_holdout_predictions, actuals_holdout, evaluate_preds_rsq)), # PCR - RMSE - Test pcr_rmse_test = unlist(ifelse(split &lt; 5, map2(pcr_test_predictions, actuals_test, evaluate_preds_rmse), NA)), # And holdout: pcr_rmse_holdout = unlist(map2(pcr_holdout_predictions, actuals_holdout, evaluate_preds_rmse)), # PCR - R^2 - Test pcr_rsq_test = unlist(ifelse(split &lt; 5, map2(pcr_test_predictions, actuals_test, evaluate_preds_rsq), NA)), # And holdout: pcr_rsq_holdout = unlist(map2(pcr_holdout_predictions, actuals_holdout, evaluate_preds_rsq))) Now we have RMSE and \\(R^2\\) values for every model created for every cryptocurrency and split of the data: select(cryptodata_nested, lm_rmse_test, lm_rsq_test, lm_rmse_holdout, lm_rsq_holdout) ## # A tibble: 480 x 6 ## # Groups: symbol, split [480] ## symbol split lm_rmse_test lm_rsq_test lm_rmse_holdout lm_rsq_holdout ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 BTC 1 0.933 0.206 0.858 0.315 ## 2 ETH 1 1.05 0.286 0.962 0.640 ## 3 EOS 1 1.02 0.606 1.04 0.225 ## 4 LTC 1 0.668 0.634 0.797 0.389 ## 5 BSV 1 0.982 0.105 0.535 0.422 ## 6 ADA 1 1.21 0.196 0.812 0.144 ## 7 ZEC 1 0.740 0.731 1.34 0.00185 ## 8 TRX 1 0.612 0.0840 0.515 0.326 ## 9 HT 1 0.613 0.000497 0.987 0.0144 ## 10 XMR 1 0.913 0.217 0.912 0.227 ## # ... with 470 more rows Only the results for the linear regression model are shown. There are equivalent columns for the XGBoost, neural network, random forest and PCR models. 8.5 Evaluate Metrics Across Splits Next, lets evaluate the metrics across all splits and keeping moving along with the model validation plan as was originally outlined. Lets create a new dataset called [cryptodata_metrics][splits]{style=color: blue;} that is not grouped by the split column and is instead only grouped by the symbol: cryptodata_metrics &lt;- group_by(select(ungroup(cryptodata_nested),-split),symbol) 8.5.1 Evaluate RMSE Test Now for each model we can create a new column giving the average RMSE for the 4 cross-validation test splits: rmse_test &lt;- mutate(cryptodata_metrics, lm = mean(lm_rmse_test, na.rm = T), xgb = mean(xgb_rmse_test, na.rm = T), nnet = mean(nnet_rmse_test, na.rm = T), rf = mean(rf_rmse_test, na.rm = T), pcr = mean(pcr_rmse_test, na.rm = T)) Now we can use the gather() function to summarize the columns as rows: rmse_test &lt;- unique(gather(select(rmse_test, lm:pcr), &#39;model&#39;, &#39;rmse&#39;, -symbol)) # Show results rmse_test ## # A tibble: 480 x 3 ## # Groups: symbol [96] ## symbol model rmse ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 BTC lm 0.592 ## 2 ETH lm 0.697 ## 3 EOS lm 1.60 ## 4 LTC lm 0.835 ## 5 BSV lm 1.10 ## 6 ADA lm 0.867 ## 7 ZEC lm 0.883 ## 8 TRX lm 0.580 ## 9 HT lm 5.14 ## 10 XMR lm 0.976 ## # ... with 470 more rows Now tag the results as having been for the test set: rmse_test$eval_set &lt;- &#39;test&#39; 8.5.2 Holdout Now repeat the same process for the holdout set: rmse_holdout &lt;- mutate(cryptodata_metrics, lm = mean(lm_rmse_holdout, na.rm = T), xgb = mean(xgb_rmse_holdout, na.rm = T), nnet = mean(nnet_rmse_holdout, na.rm = T), rf = mean(rf_rmse_holdout, na.rm = T), pcr = mean(pcr_rmse_holdout, na.rm = T)) Again, use the gather() function to summarize the columns as rows: rmse_holdout &lt;- unique(gather(select(rmse_holdout, lm:pcr), &#39;model&#39;, &#39;rmse&#39;, -symbol)) # Show results rmse_holdout ## # A tibble: 480 x 3 ## # Groups: symbol [96] ## symbol model rmse ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 BTC lm 0.858 ## 2 ETH lm 0.962 ## 3 EOS lm 1.04 ## 4 LTC lm 0.797 ## 5 BSV lm 0.535 ## 6 ADA lm 0.812 ## 7 ZEC lm 1.34 ## 8 TRX lm 0.515 ## 9 HT lm 0.987 ## 10 XMR lm 0.912 ## # ... with 470 more rows Now tag the results as having been for the holdout set: rmse_holdout$eval_set &lt;- &#39;holdout&#39; 8.5.3 Union Results Now we can union() the results to stack the rows from the two datasets on top of each other: rmse_scores &lt;- union(rmse_test, rmse_holdout) 8.6 Evaluate R^2 Now lets repeat the same steps we took for the RMSE metrics above for the \\(R^2\\) metric as well. 8.6.1 Test For each model again we will create a new column giving the average \\(R^2\\) for the 4 cross-validation test splits: rsq_test &lt;- mutate(cryptodata_metrics, lm = mean(lm_rsq_test, na.rm = T), xgb = mean(xgb_rsq_test, na.rm = T), nnet = mean(nnet_rsq_test, na.rm = T), rf = mean(rf_rsq_test, na.rm = T), pcr = mean(pcr_rsq_test, na.rm = T)) Now we can use the gather() function to summarize the columns as rows: rsq_test &lt;- unique(gather(select(rsq_test, lm:pcr), &#39;model&#39;, &#39;rsq&#39;, -symbol)) # Show results rsq_test ## # A tibble: 480 x 3 ## # Groups: symbol [96] ## symbol model rsq ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 BTC lm 0.651 ## 2 ETH lm 0.635 ## 3 EOS lm 0.574 ## 4 LTC lm 0.641 ## 5 BSV lm 0.291 ## 6 ADA lm 0.521 ## 7 ZEC lm 0.661 ## 8 TRX lm 0.437 ## 9 HT lm 0.234 ## 10 XMR lm 0.438 ## # ... with 470 more rows Now tag the results as having been for the test set rsq_test$eval_set &lt;- &#39;test&#39; 8.6.2 Holdout Do the same and calculate the averages for the holdout sets: rsq_holdout &lt;- mutate(cryptodata_metrics, lm = mean(lm_rsq_holdout, na.rm = T), xgb = mean(xgb_rsq_holdout, na.rm = T), nnet = mean(nnet_rsq_holdout, na.rm = T), rf = mean(rf_rsq_holdout, na.rm = T), pcr = mean(pcr_rsq_holdout, na.rm = T)) Now we can use the gather() function to summarize the columns as rows: rsq_holdout &lt;- unique(gather(select(rsq_holdout, lm:pcr), &#39;model&#39;, &#39;rsq&#39;, -symbol)) # Show results rsq_holdout ## # A tibble: 480 x 3 ## # Groups: symbol [96] ## symbol model rsq ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 BTC lm 0.315 ## 2 ETH lm 0.640 ## 3 EOS lm 0.225 ## 4 LTC lm 0.389 ## 5 BSV lm 0.422 ## 6 ADA lm 0.144 ## 7 ZEC lm 0.00185 ## 8 TRX lm 0.326 ## 9 HT lm 0.0144 ## 10 XMR lm 0.227 ## # ... with 470 more rows Now tag the results as having been for the holdout set: rsq_holdout$eval_set &lt;- &#39;holdout&#39; 8.6.3 Union Results rsq_scores &lt;- union(rsq_test, rsq_holdout) 8.7 Visualize Results Now we can take the same tools we learned in the Visualization section from earlier and visualize the results of the models. 8.7.1 RMSE Visualization 8.7.2 Both Now we have everything we need to use the two metrics to compare the results. 8.7.2.1 Join Datasets First join the two objects rmse_scores and rsq_scores into the new object **plot_scores: plot_scores &lt;- merge(rmse_scores, rsq_scores) 8.7.2.2 Plot Results Now we can plot the results on a chart: ggplot(plot_scores, aes(x=rsq, y=rmse, color = model)) + geom_point() + ylim(c(0,10)) Running the same code wrapped in the ggplotly() function from the plotly package (as we have already done) we can make the chart interactive. Try hovering over the points on the chart with your mouse. ggplotly(ggplot(plot_scores, aes(x=rsq, y=rmse, color = model, symbol = symbol)) + geom_point() + ylim(c(0,10)), tooltip = c(&quot;model&quot;, &quot;symbol&quot;, &quot;rmse&quot;, &quot;rsq&quot;)) The additional tooltip argument was passed to ggpltoly() to specify the label when hovering over the individual points. 8.7.3 Results by the Cryptocurrency We can use the facet_wrap() function from ggplot2 to create an individual chart for each cryptocurrency: ggplot(plot_scores, aes(x=rsq, y=rmse, color = model)) + geom_point() + geom_smooth() + ylim(c(0,10)) + facet_wrap(~symbol) Every 12 hours once this document reaches this point, the results are saved to GitHub using the pins package (which we used to read in the data at the start), and a separate script running on a different server creates the complete dataset in our database over time. You wont be able to run the code shown below (nor do you have a reason to): # register board board_register(&quot;github&quot;, repo = &quot;predictcrypto/pins&quot;, token=pins_key) # Add current date time plot_scores$last_refreshed &lt;- Sys.time() # pin data pin(plot_scores, board=&#39;github&#39;, name=&#39;crypto_tutorial_results_latest&#39;) 8.8 Interactive Dashboard Use the interactive app below to explore the results over time by the individual cryptocurrency. Use the filters on the left sidebar to visualize the results you are interested in: If you have trouble viewing the embedded dashboard you can open it here instead: https://predictcrypto.shinyapps.io/tutorial_latest_model_summary/ The default view shows the holdout results for all models. Another interesting comparison to make is between the holdout and the test set for fewer models (2 is ideal). The app shown above also has a button to Show Code. If you were to show the code and copy and paste it into an RStudio session on your computer into a file with the .Rmd file extension and you then Knit the file, the same exact app should show up on your computer, no logins or setup outside of the packages required for the code to run; RStudio should automatically prompt you to install packages that are not currently installed on your computer. 8.9 Visualizations - Historical Metrics We can pull the same data into this R session using the pin_get() function: metrics_historical &lt;- pin_get(name = &quot;full_metrics&quot;) The data is limited to metrics for runs from the past 30 days and includes new data every 12 hours. Using the tools we used in the data prep section, we can answer a couple more questions. 8.9.1 Best Models Overall, which model has the best metrics for all runs from the last 30 days? 8.9.1.1 Summarize the data # First create grouped data best_models &lt;- group_by(metrics_historical, model, eval_set) # Now summarize the data best_models &lt;- summarize(best_models, rmse = mean(rmse, na.rm=T), rsq = mean(rsq, na.rm=T)) # Show results best_models ## # A tibble: 10 x 4 ## # Groups: model [5] ## model eval_set rmse rsq ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 lm holdout 15.5 0.506 ## 2 lm test 4.07 0.478 ## 3 nnet holdout 4.31 0.149 ## 4 nnet test 4.63 0.164 ## 5 pcr holdout 2.72 0.252 ## 6 pcr test 2.92 0.278 ## 7 rf holdout 3.96 0.114 ## 8 rf test 3.83 0.129 ## 9 xgb holdout 5.01 0.0693 ## 10 xgb test 4.56 0.0885 8.9.1.2 Plot RMSE by Model ggplot(best_models, aes(model, rmse, fill = eval_set)) + geom_bar(stat = &quot;identity&quot;, position = &#39;dodge&#39;) + ggtitle(&#39;RMSE by Model&#39;, &#39;Comparing Test and Holdout&#39;) 8.9.1.3 Plot \\(R^2\\) by Model ggplot(best_models, aes(model, rsq, fill = eval_set)) + geom_bar(stat = &quot;identity&quot;, position = &#39;dodge&#39;) + ggtitle(&#39;R^2 by Model&#39;, &#39;Comparing Test and Holdout&#39;) 8.9.2 Most Predictable Cryptocurrency Overall, which cryptocurrency has the best metrics for all runs from the last 30 days? 8.9.2.1 Summarize the data # First create grouped data predictable_cryptos &lt;- group_by(metrics_historical, symbol, eval_set) # Now summarize the data predictable_cryptos &lt;- summarize(predictable_cryptos, rmse = mean(rmse, na.rm=T), rsq = mean(rsq, na.rm=T)) # Arrange from most predictable (according to R^2) to least predictable_cryptos &lt;- arrange(predictable_cryptos, desc(rsq)) # Show results predictable_cryptos ## # A tibble: 178 x 4 ## # Groups: symbol [89] ## symbol eval_set rmse rsq ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 NAV test 3.30 0.434 ## 2 POA holdout 4.60 0.423 ## 3 CUR holdout 6.09 0.410 ## 4 CND test 1.84 0.374 ## 5 CND holdout 5.24 0.360 ## 6 SEELE holdout 8.88 0.355 ## 7 ADXN test 9.26 0.348 ## 8 RCN test 5.03 0.337 ## 9 BTC test 1.32 0.331 ## 10 SUN holdout 3.17 0.330 ## # ... with 168 more rows .scroll-100 { max-height: 100px; overflow-y: auto; background-color: inherit; } Show the top 15 most predictable cryptocurrencies (according to the \\(R^2\\)) using the formattable package (Ren and Russell 2016) to color code the cells: formattable(head(predictable_cryptos ,15), list(rmse = color_tile(&quot;#71CA97&quot;, &quot;red&quot;), rsq = color_tile(&quot;firebrick1&quot;, &quot;#71CA97&quot;))) symbol eval_set rmse rsq NAV test 3.299791 0.4338237 POA holdout 4.596582 0.4229192 CUR holdout 6.088416 0.4098434 CND test 1.835020 0.3737691 CND holdout 5.238670 0.3601346 SEELE holdout 8.876745 0.3548372 ADXN test 9.263022 0.3478368 RCN test 5.030197 0.3367737 BTC test 1.321379 0.3307333 SUN holdout 3.172350 0.3299285 AAB test 39.511003 0.3262746 ETH test 1.721290 0.3197170 LTC test 2.102832 0.3189001 LEO test 1.695632 0.3166553 RCN holdout 7.564985 0.3130917 8.9.3 Accuracy Over Time 8.9.3.1 Summarize the data # First create grouped data accuracy_over_time &lt;- group_by(metrics_historical, date_utc) # Now summarize the data accuracy_over_time &lt;- summarize(accuracy_over_time, rmse = mean(rmse, na.rm=T), rsq = mean(rsq, na.rm=T)) # Ungroup data accuracy_over_time &lt;- ungroup(accuracy_over_time) # Convert date/time accuracy_over_time$date_utc &lt;- anytime(accuracy_over_time$date_utc) # Show results accuracy_over_time ## # A tibble: 30 x 3 ## date_utc rmse rsq ## &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2021-01-12 00:00:00 4.05 0.241 ## 2 2021-01-13 00:00:00 4.29 0.236 ## 3 2021-01-14 00:00:00 4.06 0.251 ## 4 2021-01-16 00:00:00 4.25 0.214 ## 5 2021-01-17 00:00:00 3.78 0.199 ## 6 2021-01-18 00:00:00 3.88 0.212 ## 7 2021-01-19 00:00:00 3.86 0.204 ## 8 2021-01-20 00:00:00 4.65 0.207 ## 9 2021-01-21 00:00:00 3.41 0.222 ## 10 2021-01-22 00:00:00 4.05 0.231 ## # ... with 20 more rows 8.9.3.2 Plot RMSE Remember, for RMSE the lower the score, the more accurate the models were. ggplot(accuracy_over_time, aes(x = date_utc, y = rmse, group = 1)) + # Plot RMSE over time geom_point(color = &#39;red&#39;, size = 2) + geom_line(color = &#39;red&#39;, size = 1) 8.9.3.3 Plot R^2 For the R^2 recall that we are looking at the correlation between the predictions made and what actually happened, so the higher the score the better, with a maximum score of 1 that would mean the predictions were 100% correlated with each other and therefore identical. ggplot(accuracy_over_time, aes(x = date_utc, y = rsq, group = 1)) + # Plot R^2 over time geom_point(aes(x = date_utc, y = rsq), color = &#39;dark green&#39;, size = 2) + geom_line(aes(x = date_utc, y = rsq), color = &#39;dark green&#39;, size = 1) Refer back to the interactive dashboard to take a more specific subset of results instead of the aggregate analysis shown above. References "],["considerations.html", "Section - 9 Considerations 9.1 Not a trading tutorial 9.2 Session Information", " Section - 9 Considerations 9.1 Not a trading tutorial In this document we aimed to predict the change in cryptocurrency prices, and it is very important to recognize that this is not the same as being able to successfully make money trading on the cryptocurrency markets. This is a very important distinction for the following reasons (and many more we have not thought of): We already covered some of the reasons for why there is a meaningful difference between predicting price movements for the cryptocurrency markets and actually performing effective trades in the data exploration section, but things are further complicated by the fact that trades can be posted as either a limit order or a market order. A limit order gets added to the order book after the trader specifies the price point and the quantity, while a market order initiates a trade with the most favorable price from the order book. This is why someone doing a limit order would be referred to as a market maker, while someone posting a market order would be consider to be a market taker; this indicates whether someone is creating new liquidity for the market, or are taking from the available liquidity, which has implications in terms of the fees that the exchange actually charges, because exchanges prefer encouring activity that results in more liquidity rather than less. See this link for the latest specific maker and taker fees based on trading volume and more details on their rationale (as was also explained here). There are many cryptocurrencies that have really low levels of liquidity, which can severely affect the ability to purchase the cryptocurrency at the desired price point and at the desired time. Simply put, things can get extraordinarily complex. When programmatically trading it is easy to make a single mistake that ends up being more costly than the potential upside of a successful trading system. Even if these models were at all accurate in predicting price changes, that would not necessarily indicate that future performance would be any good. The data made available in this tutorial is very limited in scope and perspective, and has no way of understanding more complex dynamics like world events and news coverage, which could very well have an effect on the prices. Finding an effective trading strategy is easier said than done. Even if we could be accurate in predicting these markets, there is no guarantee we would be able to translate those predictions into an effective trading strategy. There are many nuances (i.e. trading fees) to deal with and decisions to be made, coming up with a good trade execution plan that works consistently is not easy. Another thing we did not consider in this tutorial is the distinction between the price at which we could buy the cryptocurrency (the ask price), and the price at which we could sell it (the bid price). In our example we predicted where the ask price was headed rather than considering a specific trading dynamic. One additional consideration to make, is that a good trading strategy would not only consider the beginning and ending points, but would make small adjustments based on how things are going over time, and that is another consideration that is not relevant to the approach we took because we are predicting price changes between those two points rather than coming up with a good trading strategy. Hopefully it is clear by now, but this tutorial is not meant to show anyone how to trade on the cryptocurrency markets, but rather encourage people to apply these tools to their own data problems, and that is the reason the tutorial stops here (also because we like not getting sued). 9.2 Session Information Below is information relating to the specific R session that was run. If you are unable to reproduce these steps, you can find the correct version of the tools to install below. Otherwise follow the instructions to run the code in the cloud instead. sessionInfo() ## R version 4.0.3 (2020-10-10) ## Platform: x86_64-w64-mingw32/x64 (64-bit) ## Running under: Windows Server x64 (build 17763) ## ## Matrix products: default ## ## locale: ## [1] LC_COLLATE=English_United States.1252 ## [2] LC_CTYPE=English_United States.1252 ## [3] LC_MONETARY=English_United States.1252 ## [4] LC_NUMERIC=C ## [5] LC_TIME=English_United States.1252 ## ## attached base packages: ## [1] stats4 grid parallel stats graphics grDevices utils ## [8] datasets methods base ## ## other attached packages: ## [1] formattable_0.2.0.1 hydroGOF_0.4-0 pls_2.7-3 ## [4] elasticnet_1.3 lars_1.2 deepnet_0.2 ## [7] party_1.3-5 strucchange_1.5-2 sandwich_3.0-0 ## [10] zoo_1.8-8 modeltools_0.2-23 mvtnorm_1.1-1 ## [13] brnn_0.8 truncnorm_1.0-8 Formula_1.2-4 ## [16] xgboost_1.0.0.2 doParallel_1.0.15 iterators_1.0.12 ## [19] foreach_1.5.0 caret_6.0-86 lattice_0.20-38 ## [22] transformr_0.1.3 gganimate_1.0.5 ggforce_0.3.2 ## [25] ggpubr_0.4.0 plotly_4.9.2.1 ggthemes_4.2.0 ## [28] magick_2.5.0 av_0.5.1 gifski_0.8.6 ## [31] ggTimeSeries_1.0.1 anytime_0.3.7 tsibble_0.9.2 ## [34] forcats_0.5.0 stringr_1.4.0 dplyr_1.0.2 ## [37] purrr_0.3.4 readr_1.3.1 tidyr_1.1.1 ## [40] tibble_3.0.4 ggplot2_3.3.2 tidyverse_1.3.0 ## [43] jsonlite_1.7.1 httr_1.4.2 DT_0.15 ## [46] skimr_2.1 pins_0.4.0 pacman_0.5.1 ## [49] knitr_1.39 bookdown_0.29 ## ## loaded via a namespace (and not attached): ## [1] utf8_1.1.4 tidyselect_1.1.0 htmlwidgets_1.5.1 ## [4] maptools_1.0-2 lpSolve_5.6.15 pROC_1.16.2 ## [7] munsell_0.5.0 codetools_0.2-16 units_0.6-7 ## [10] withr_2.5.0 colorspace_1.4-1 filelock_1.0.2 ## [13] highr_0.8 rstudioapi_0.11 ggsignif_0.6.0 ## [16] labeling_0.3 repr_1.1.0 polyclip_1.10-0 ## [19] farver_2.0.3 vctrs_0.3.2 generics_0.0.2 ## [22] TH.data_1.0-10 ipred_0.9-9 xfun_0.31 ## [25] R6_2.4.1 reshape_0.8.8 assertthat_0.2.1 ## [28] hydroTSM_0.6-0 scales_1.1.1 multcomp_1.4-15 ## [31] nnet_7.3-12 gtable_0.3.0 timeDate_3043.102 ## [34] rlang_1.0.2 splines_4.0.3 rstatix_0.6.0 ## [37] lazyeval_0.2.2 ModelMetrics_1.2.2.2 broom_0.7.2 ## [40] yaml_2.2.1 reshape2_1.4.3 abind_1.4-5 ## [43] modelr_0.1.6 crosstalk_1.1.0.1 backports_1.1.6 ## [46] tools_4.0.3 lava_1.6.7 gstat_2.0-6 ## [49] ellipsis_0.3.1 jquerylib_0.1.4 Rcpp_1.0.8.3 ## [52] plyr_1.8.6 base64enc_0.1-3 progress_1.2.2 ## [55] classInt_0.4-3 prettyunits_1.1.1 rpart_4.1-15 ## [58] haven_2.2.0 fs_1.4.1 magrittr_1.5 ## [61] data.table_1.12.8 openxlsx_4.2.2 spacetime_1.2-3 ## [64] reprex_0.3.0 matrixStats_0.57.0 hms_0.5.3 ## [67] evaluate_0.15 rio_0.5.16 readxl_1.3.1 ## [70] compiler_4.0.3 KernSmooth_2.23-16 crayon_1.3.4 ## [73] htmltools_0.5.2 mgcv_1.8-31 libcoin_1.0-6 ## [76] lubridate_1.7.8 DBI_1.1.0 tweenr_1.0.1 ## [79] dbplyr_1.4.2 MASS_7.3-51.5 rappdirs_0.3.1 ## [82] sf_0.9-6 Matrix_1.2-18 car_3.0-10 ## [85] cli_3.3.0 gower_0.2.1 pkgconfig_2.0.3 ## [88] coin_1.3-1 foreign_0.8-80 sp_1.4-1 ## [91] recipes_0.1.14 xml2_1.3.1 bslib_0.3.1 ## [94] prodlim_2019.11.13 rvest_0.3.5 digest_0.6.25 ## [97] rmarkdown_2.14 cellranger_1.1.0 intervals_0.15.2 ## [100] curl_4.3 lifecycle_0.2.0 nlme_3.1-144 ## [103] carData_3.0-4 viridisLite_0.3.0 fansi_0.4.1 ## [106] pillar_1.4.4 fastmap_1.1.0 survival_3.1-8 ## [109] glue_1.6.2 xts_0.12.1 zip_2.0.4 ## [112] FNN_1.1.3 class_7.3-15 stringi_1.4.6 ## [115] sass_0.4.1 automap_1.0-14 e1071_1.7-4 "],["archive.html", "Section - 10 Archive 10.1 November 2020", " Section - 10 Archive Below is an archive of this same document from different dates. By clicking on any of the links below you can view this same document as was published on a given date. 10.1 November 2020 November 15th, 2020 - Night November 15th, 2020 - Morning November 14th, 2020 - Night "],["references.html", "Section - 11 References 11.1 Document Format 11.2 Open Review Toolkit 11.3 Visualization 11.4 Predictive Modeling 11.5 Evaluate Model Performance 11.6 Additional Contributors 11.7 R Packages Used", " Section - 11 References 11.1 Document Format The bookdown package (Xie 2022a) was used to produce this document, which was built on top of R Markdown (Xie, Allaire, and Grolemund 2018) and knitr (Xie 2022b). https://bookdown.org/ https://rmarkdown.rstudio.com/ https://yihui.org/knitr/ 11.2 Open Review Toolkit Thanks to Ben Marwick for outlining how to use the Open Review Toolkit in bookdown to collect feedback on the document: https://benmarwick.github.io/bookdown-ort/mods.html#open-review-block 11.3 Visualization https://www.rayshader.com/ https://ggplot2.tidyverse.org/ https://www.data-imaginist.com/2019/the-ggforce-awakens-again/ 11.4 Predictive Modeling https://topepo.github.io/caret/available-models.html 11.4.1 Time Series https://tidyverts.org/ 11.5 Evaluate Model Performance https://en.wikipedia.org/wiki/Root-mean-square_deviation https://medium.com/human-in-a-machine-world/mae-and-rmse-which-metric-is-better-e60ac3bde13d https://en.wikipedia.org/wiki/Coefficient_of_determination 11.6 Additional Contributors A big thank you to anyone who has left feedback to improve this document: David Butler for pointing out a typo 11.7 R Packages Used "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
